// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id, name, slug, description, parent_id, display_order)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, name, slug, description, parent_id, display_order, created_at, updated_at
`

type CreateCategoryParams struct {
	ID           string         `db:"id" json:"id"`
	Name         string         `db:"name" json:"name"`
	Slug         string         `db:"slug" json:"slug"`
	Description  sql.NullString `db:"description" json:"description"`
	ParentID     sql.NullString `db:"parent_id" json:"parent_id"`
	DisplayOrder sql.NullInt64  `db:"display_order" json:"display_order"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.ParentID,
		arg.DisplayOrder,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ParentID,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, slug, description, parent_id, display_order, created_at, updated_at FROM categories WHERE id = ?
`

func (q *Queries) GetCategory(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ParentID,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryBySlug = `-- name: GetCategoryBySlug :one
SELECT id, name, slug, description, parent_id, display_order, created_at, updated_at FROM categories WHERE slug = ?
`

func (q *Queries) GetCategoryBySlug(ctx context.Context, slug string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryBySlug, slug)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ParentID,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, slug, description, parent_id, display_order, created_at, updated_at FROM categories ORDER BY display_order ASC, name ASC
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ParentID,
			&i.DisplayOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesByParent = `-- name: ListCategoriesByParent :many
SELECT id, name, slug, description, parent_id, display_order, created_at, updated_at FROM categories WHERE parent_id = ? ORDER BY display_order ASC, name ASC
`

func (q *Queries) ListCategoriesByParent(ctx context.Context, parentID sql.NullString) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategoriesByParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ParentID,
			&i.DisplayOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRootCategories = `-- name: ListRootCategories :many
SELECT id, name, slug, description, parent_id, display_order, created_at, updated_at FROM categories WHERE parent_id IS NULL ORDER BY display_order ASC, name ASC
`

func (q *Queries) ListRootCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listRootCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ParentID,
			&i.DisplayOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories 
SET name = ?, slug = ?, description = ?, parent_id = ?, display_order = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, slug, description, parent_id, display_order, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name         string         `db:"name" json:"name"`
	Slug         string         `db:"slug" json:"slug"`
	Description  sql.NullString `db:"description" json:"description"`
	ParentID     sql.NullString `db:"parent_id" json:"parent_id"`
	DisplayOrder sql.NullInt64  `db:"display_order" json:"display_order"`
	ID           string         `db:"id" json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.ParentID,
		arg.DisplayOrder,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ParentID,
		&i.DisplayOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
