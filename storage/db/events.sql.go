// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: events.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    id, title, description, location, address, start_date, end_date, url, is_active
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, title, description, location, address, start_date, end_date, url, is_active, created_at, updated_at
`

type CreateEventParams struct {
	ID          string         `db:"id" json:"id"`
	Title       string         `db:"title" json:"title"`
	Description sql.NullString `db:"description" json:"description"`
	Location    sql.NullString `db:"location" json:"location"`
	Address     sql.NullString `db:"address" json:"address"`
	StartDate   time.Time      `db:"start_date" json:"start_date"`
	EndDate     sql.NullTime   `db:"end_date" json:"end_date"`
	Url         sql.NullString `db:"url" json:"url"`
	IsActive    sql.NullBool   `db:"is_active" json:"is_active"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Location,
		arg.Address,
		arg.StartDate,
		arg.EndDate,
		arg.Url,
		arg.IsActive,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Location,
		&i.Address,
		&i.StartDate,
		&i.EndDate,
		&i.Url,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE id = ?
`

func (q *Queries) DeleteEvent(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, title, description, location, address, start_date, end_date, url, is_active, created_at, updated_at FROM events WHERE id = ?
`

func (q *Queries) GetEvent(ctx context.Context, id string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Location,
		&i.Address,
		&i.StartDate,
		&i.EndDate,
		&i.Url,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEventStats = `-- name: GetEventStats :one
SELECT 
    COUNT(*) as total_events,
    COUNT(CASE WHEN is_active = TRUE THEN 1 END) as active_events,
    COUNT(CASE WHEN is_active = TRUE AND start_date >= DATE('now') THEN 1 END) as upcoming_events,
    COUNT(CASE WHEN is_active = TRUE AND start_date < DATE('now') THEN 1 END) as past_events
FROM events
`

type GetEventStatsRow struct {
	TotalEvents    int64 `db:"total_events" json:"total_events"`
	ActiveEvents   int64 `db:"active_events" json:"active_events"`
	UpcomingEvents int64 `db:"upcoming_events" json:"upcoming_events"`
	PastEvents     int64 `db:"past_events" json:"past_events"`
}

func (q *Queries) GetEventStats(ctx context.Context) (GetEventStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getEventStats)
	var i GetEventStatsRow
	err := row.Scan(
		&i.TotalEvents,
		&i.ActiveEvents,
		&i.UpcomingEvents,
		&i.PastEvents,
	)
	return i, err
}

const listActiveEvents = `-- name: ListActiveEvents :many
SELECT id, title, description, location, address, start_date, end_date, url, is_active, created_at, updated_at FROM events 
WHERE is_active = TRUE 
ORDER BY start_date ASC
`

func (q *Queries) ListActiveEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listActiveEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Location,
			&i.Address,
			&i.StartDate,
			&i.EndDate,
			&i.Url,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT id, title, description, location, address, start_date, end_date, url, is_active, created_at, updated_at FROM events 
ORDER BY start_date DESC
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Location,
			&i.Address,
			&i.StartDate,
			&i.EndDate,
			&i.Url,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPastEvents = `-- name: ListPastEvents :many
SELECT id, title, description, location, address, start_date, end_date, url, is_active, created_at, updated_at FROM events 
WHERE is_active = TRUE AND start_date < DATE('now')
ORDER BY start_date DESC
`

func (q *Queries) ListPastEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listPastEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Location,
			&i.Address,
			&i.StartDate,
			&i.EndDate,
			&i.Url,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingEvents = `-- name: ListUpcomingEvents :many
SELECT id, title, description, location, address, start_date, end_date, url, is_active, created_at, updated_at FROM events 
WHERE is_active = TRUE AND start_date >= DATE('now')
ORDER BY start_date ASC
`

func (q *Queries) ListUpcomingEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listUpcomingEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Location,
			&i.Address,
			&i.StartDate,
			&i.EndDate,
			&i.Url,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events 
SET title = ?, description = ?, location = ?, address = ?, 
    start_date = ?, end_date = ?, url = ?, is_active = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, title, description, location, address, start_date, end_date, url, is_active, created_at, updated_at
`

type UpdateEventParams struct {
	Title       string         `db:"title" json:"title"`
	Description sql.NullString `db:"description" json:"description"`
	Location    sql.NullString `db:"location" json:"location"`
	Address     sql.NullString `db:"address" json:"address"`
	StartDate   time.Time      `db:"start_date" json:"start_date"`
	EndDate     sql.NullTime   `db:"end_date" json:"end_date"`
	Url         sql.NullString `db:"url" json:"url"`
	IsActive    sql.NullBool   `db:"is_active" json:"is_active"`
	ID          string         `db:"id" json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.Title,
		arg.Description,
		arg.Location,
		arg.Address,
		arg.StartDate,
		arg.EndDate,
		arg.Url,
		arg.IsActive,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Location,
		&i.Address,
		&i.StartDate,
		&i.EndDate,
		&i.Url,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEventActiveStatus = `-- name: UpdateEventActiveStatus :one
UPDATE events 
SET is_active = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, title, description, location, address, start_date, end_date, url, is_active, created_at, updated_at
`

type UpdateEventActiveStatusParams struct {
	IsActive sql.NullBool `db:"is_active" json:"is_active"`
	ID       string       `db:"id" json:"id"`
}

func (q *Queries) UpdateEventActiveStatus(ctx context.Context, arg UpdateEventActiveStatusParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEventActiveStatus, arg.IsActive, arg.ID)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Location,
		&i.Address,
		&i.StartDate,
		&i.EndDate,
		&i.Url,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
