// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: favorites.sql

package db

import (
	"context"
	"database/sql"
)

const addFavorite = `-- name: AddFavorite :one
INSERT INTO user_favorites (id, user_id, product_id, created_at)
VALUES (?, ?, ?, CURRENT_TIMESTAMP)
RETURNING id, user_id, product_id, created_at
`

type AddFavoriteParams struct {
	ID        string `db:"id" json:"id"`
	UserID    string `db:"user_id" json:"user_id"`
	ProductID string `db:"product_id" json:"product_id"`
}

func (q *Queries) AddFavorite(ctx context.Context, arg AddFavoriteParams) (UserFavorite, error) {
	row := q.db.QueryRowContext(ctx, addFavorite, arg.ID, arg.UserID, arg.ProductID)
	var i UserFavorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.CreatedAt,
	)
	return i, err
}

const getFavoriteCount = `-- name: GetFavoriteCount :one
SELECT COUNT(*) as count
FROM user_favorites
WHERE user_id = ?
`

func (q *Queries) GetFavoriteCount(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getFavoriteCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserFavorites = `-- name: GetUserFavorites :many
SELECT 
    f.id,
    f.user_id,
    f.product_id,
    f.created_at,
    p.name AS product_name,
    p.slug AS product_slug,
    p.price_cents,
    p.short_description,
    pi.image_url AS primary_image_url
FROM user_favorites f
INNER JOIN products p ON f.product_id = p.id
LEFT JOIN product_images pi ON p.id = pi.product_id AND pi.is_primary = TRUE
WHERE f.user_id = ?
ORDER BY f.created_at DESC
`

type GetUserFavoritesRow struct {
	ID               string         `db:"id" json:"id"`
	UserID           string         `db:"user_id" json:"user_id"`
	ProductID        string         `db:"product_id" json:"product_id"`
	CreatedAt        sql.NullTime   `db:"created_at" json:"created_at"`
	ProductName      string         `db:"product_name" json:"product_name"`
	ProductSlug      string         `db:"product_slug" json:"product_slug"`
	PriceCents       int64          `db:"price_cents" json:"price_cents"`
	ShortDescription sql.NullString `db:"short_description" json:"short_description"`
	PrimaryImageUrl  sql.NullString `db:"primary_image_url" json:"primary_image_url"`
}

func (q *Queries) GetUserFavorites(ctx context.Context, userID string) ([]GetUserFavoritesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFavorites, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserFavoritesRow{}
	for rows.Next() {
		var i GetUserFavoritesRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
			&i.ProductName,
			&i.ProductSlug,
			&i.PriceCents,
			&i.ShortDescription,
			&i.PrimaryImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isFavorite = `-- name: IsFavorite :one
SELECT COUNT(*) as is_favorite
FROM user_favorites
WHERE user_id = ? AND product_id = ?
`

type IsFavoriteParams struct {
	UserID    string `db:"user_id" json:"user_id"`
	ProductID string `db:"product_id" json:"product_id"`
}

func (q *Queries) IsFavorite(ctx context.Context, arg IsFavoriteParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, isFavorite, arg.UserID, arg.ProductID)
	var is_favorite int64
	err := row.Scan(&is_favorite)
	return is_favorite, err
}

const removeFavorite = `-- name: RemoveFavorite :exec
DELETE FROM user_favorites
WHERE user_id = ? AND product_id = ?
`

type RemoveFavoriteParams struct {
	UserID    string `db:"user_id" json:"user_id"`
	ProductID string `db:"product_id" json:"product_id"`
}

func (q *Queries) RemoveFavorite(ctx context.Context, arg RemoveFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, removeFavorite, arg.UserID, arg.ProductID)
	return err
}
