// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orders.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    id, user_id, customer_email, customer_name, customer_phone,
    shipping_address_line1, shipping_address_line2, shipping_city, shipping_state,
    shipping_postal_code, shipping_country,
    subtotal_cents, tax_cents, shipping_cents, total_cents,
    original_subtotal_cents, discount_cents, promotion_code, promotion_code_id,
    stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id,
    easypost_shipment_id, status, notes
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id
`

type CreateOrderParams struct {
	ID                      string         `db:"id" json:"id"`
	UserID                  string         `db:"user_id" json:"user_id"`
	CustomerEmail           string         `db:"customer_email" json:"customer_email"`
	CustomerName            string         `db:"customer_name" json:"customer_name"`
	CustomerPhone           sql.NullString `db:"customer_phone" json:"customer_phone"`
	ShippingAddressLine1    string         `db:"shipping_address_line1" json:"shipping_address_line1"`
	ShippingAddressLine2    sql.NullString `db:"shipping_address_line2" json:"shipping_address_line2"`
	ShippingCity            string         `db:"shipping_city" json:"shipping_city"`
	ShippingState           string         `db:"shipping_state" json:"shipping_state"`
	ShippingPostalCode      string         `db:"shipping_postal_code" json:"shipping_postal_code"`
	ShippingCountry         string         `db:"shipping_country" json:"shipping_country"`
	SubtotalCents           int64          `db:"subtotal_cents" json:"subtotal_cents"`
	TaxCents                int64          `db:"tax_cents" json:"tax_cents"`
	ShippingCents           int64          `db:"shipping_cents" json:"shipping_cents"`
	TotalCents              int64          `db:"total_cents" json:"total_cents"`
	OriginalSubtotalCents   sql.NullInt64  `db:"original_subtotal_cents" json:"original_subtotal_cents"`
	DiscountCents           sql.NullInt64  `db:"discount_cents" json:"discount_cents"`
	PromotionCode           sql.NullString `db:"promotion_code" json:"promotion_code"`
	PromotionCodeID         sql.NullString `db:"promotion_code_id" json:"promotion_code_id"`
	StripePaymentIntentID   sql.NullString `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	StripeCustomerID        sql.NullString `db:"stripe_customer_id" json:"stripe_customer_id"`
	StripeCheckoutSessionID sql.NullString `db:"stripe_checkout_session_id" json:"stripe_checkout_session_id"`
	EasypostShipmentID      sql.NullString `db:"easypost_shipment_id" json:"easypost_shipment_id"`
	Status                  sql.NullString `db:"status" json:"status"`
	Notes                   sql.NullString `db:"notes" json:"notes"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.CustomerEmail,
		arg.CustomerName,
		arg.CustomerPhone,
		arg.ShippingAddressLine1,
		arg.ShippingAddressLine2,
		arg.ShippingCity,
		arg.ShippingState,
		arg.ShippingPostalCode,
		arg.ShippingCountry,
		arg.SubtotalCents,
		arg.TaxCents,
		arg.ShippingCents,
		arg.TotalCents,
		arg.OriginalSubtotalCents,
		arg.DiscountCents,
		arg.PromotionCode,
		arg.PromotionCodeID,
		arg.StripePaymentIntentID,
		arg.StripeCustomerID,
		arg.StripeCheckoutSessionID,
		arg.EasypostShipmentID,
		arg.Status,
		arg.Notes,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingState,
		&i.ShippingPostalCode,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.TaxCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Status,
		&i.Notes,
		&i.StripePaymentIntentID,
		&i.StripeCustomerID,
		&i.StripeCheckoutSessionID,
		&i.TrackingNumber,
		&i.TrackingUrl,
		&i.Carrier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EasypostShipmentID,
		&i.EasypostLabelUrl,
		&i.OriginalSubtotalCents,
		&i.DiscountCents,
		&i.PromotionCode,
		&i.PromotionCodeID,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    id, order_id, product_id, product_variant_id, quantity, unit_price_cents, 
    total_price_cents, product_name, product_sku
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, order_id, product_id, product_variant_id, quantity, unit_price_cents, total_price_cents, product_name, product_sku, created_at
`

type CreateOrderItemParams struct {
	ID               string         `db:"id" json:"id"`
	OrderID          string         `db:"order_id" json:"order_id"`
	ProductID        string         `db:"product_id" json:"product_id"`
	ProductVariantID sql.NullString `db:"product_variant_id" json:"product_variant_id"`
	Quantity         int64          `db:"quantity" json:"quantity"`
	UnitPriceCents   int64          `db:"unit_price_cents" json:"unit_price_cents"`
	TotalPriceCents  int64          `db:"total_price_cents" json:"total_price_cents"`
	ProductName      string         `db:"product_name" json:"product_name"`
	ProductSku       sql.NullString `db:"product_sku" json:"product_sku"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.ProductVariantID,
		arg.Quantity,
		arg.UnitPriceCents,
		arg.TotalPriceCents,
		arg.ProductName,
		arg.ProductSku,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.ProductVariantID,
		&i.Quantity,
		&i.UnitPriceCents,
		&i.TotalPriceCents,
		&i.ProductName,
		&i.ProductSku,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = ?
`

func (q *Queries) DeleteOrder(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id FROM orders WHERE id = ?
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingState,
		&i.ShippingPostalCode,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.TaxCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Status,
		&i.Notes,
		&i.StripePaymentIntentID,
		&i.StripeCustomerID,
		&i.StripeCheckoutSessionID,
		&i.TrackingNumber,
		&i.TrackingUrl,
		&i.Carrier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EasypostShipmentID,
		&i.EasypostLabelUrl,
		&i.OriginalSubtotalCents,
		&i.DiscountCents,
		&i.PromotionCode,
		&i.PromotionCodeID,
	)
	return i, err
}

const getOrderByStripeSessionID = `-- name: GetOrderByStripeSessionID :one
SELECT id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id FROM orders
WHERE stripe_checkout_session_id = ?
LIMIT 1
`

func (q *Queries) GetOrderByStripeSessionID(ctx context.Context, stripeCheckoutSessionID sql.NullString) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByStripeSessionID, stripeCheckoutSessionID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingState,
		&i.ShippingPostalCode,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.TaxCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Status,
		&i.Notes,
		&i.StripePaymentIntentID,
		&i.StripeCustomerID,
		&i.StripeCheckoutSessionID,
		&i.TrackingNumber,
		&i.TrackingUrl,
		&i.Carrier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EasypostShipmentID,
		&i.EasypostLabelUrl,
		&i.OriginalSubtotalCents,
		&i.DiscountCents,
		&i.PromotionCode,
		&i.PromotionCodeID,
	)
	return i, err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, product_id, product_variant_id, quantity, unit_price_cents, total_price_cents, product_name, product_sku, created_at FROM order_items WHERE order_id = ?
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID string) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.ProductVariantID,
			&i.Quantity,
			&i.UnitPriceCents,
			&i.TotalPriceCents,
			&i.ProductName,
			&i.ProductSku,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderStats = `-- name: GetOrderStats :one
SELECT
    COUNT(*) as total_orders,
    COUNT(CASE WHEN status = 'received' THEN 1 END) as received_orders,
    COUNT(CASE WHEN status = 'in_production' THEN 1 END) as in_production_orders,
    COUNT(CASE WHEN status = 'shipped' THEN 1 END) as shipped_orders,
    COUNT(CASE WHEN status = 'delivered' THEN 1 END) as delivered_orders,
    COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_orders,
    SUM(total_cents) as total_revenue_cents,
    AVG(total_cents) as average_order_value_cents
FROM orders
`

type GetOrderStatsRow struct {
	TotalOrders            int64           `db:"total_orders" json:"total_orders"`
	ReceivedOrders         int64           `db:"received_orders" json:"received_orders"`
	InProductionOrders     int64           `db:"in_production_orders" json:"in_production_orders"`
	ShippedOrders          int64           `db:"shipped_orders" json:"shipped_orders"`
	DeliveredOrders        int64           `db:"delivered_orders" json:"delivered_orders"`
	CancelledOrders        int64           `db:"cancelled_orders" json:"cancelled_orders"`
	TotalRevenueCents      sql.NullFloat64 `db:"total_revenue_cents" json:"total_revenue_cents"`
	AverageOrderValueCents sql.NullFloat64 `db:"average_order_value_cents" json:"average_order_value_cents"`
}

func (q *Queries) GetOrderStats(ctx context.Context) (GetOrderStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderStats)
	var i GetOrderStatsRow
	err := row.Scan(
		&i.TotalOrders,
		&i.ReceivedOrders,
		&i.InProductionOrders,
		&i.ShippedOrders,
		&i.DeliveredOrders,
		&i.CancelledOrders,
		&i.TotalRevenueCents,
		&i.AverageOrderValueCents,
	)
	return i, err
}

const getOrderWithItems = `-- name: GetOrderWithItems :one
SELECT 
    o.id, o.user_id, o.customer_name, o.customer_email, o.customer_phone, o.shipping_address_line1, o.shipping_address_line2, o.shipping_city, o.shipping_state, o.shipping_postal_code, o.shipping_country, o.subtotal_cents, o.tax_cents, o.shipping_cents, o.total_cents, o.status, o.notes, o.stripe_payment_intent_id, o.stripe_customer_id, o.stripe_checkout_session_id, o.tracking_number, o.tracking_url, o.carrier, o.created_at, o.updated_at, o.easypost_shipment_id, o.easypost_label_url, o.original_subtotal_cents, o.discount_cents, o.promotion_code, o.promotion_code_id,
    GROUP_CONCAT(
        oi.id || ',' || oi.product_id || ',' || oi.quantity || ',' || 
        oi.unit_price_cents || ',' || oi.total_price_cents || ',' || 
        oi.product_name || ',' || COALESCE(oi.product_sku, '')
    ) as order_items
FROM orders o
LEFT JOIN order_items oi ON o.id = oi.order_id
WHERE o.id = ?
GROUP BY o.id
`

type GetOrderWithItemsRow struct {
	ID                      string         `db:"id" json:"id"`
	UserID                  string         `db:"user_id" json:"user_id"`
	CustomerName            string         `db:"customer_name" json:"customer_name"`
	CustomerEmail           string         `db:"customer_email" json:"customer_email"`
	CustomerPhone           sql.NullString `db:"customer_phone" json:"customer_phone"`
	ShippingAddressLine1    string         `db:"shipping_address_line1" json:"shipping_address_line1"`
	ShippingAddressLine2    sql.NullString `db:"shipping_address_line2" json:"shipping_address_line2"`
	ShippingCity            string         `db:"shipping_city" json:"shipping_city"`
	ShippingState           string         `db:"shipping_state" json:"shipping_state"`
	ShippingPostalCode      string         `db:"shipping_postal_code" json:"shipping_postal_code"`
	ShippingCountry         string         `db:"shipping_country" json:"shipping_country"`
	SubtotalCents           int64          `db:"subtotal_cents" json:"subtotal_cents"`
	TaxCents                int64          `db:"tax_cents" json:"tax_cents"`
	ShippingCents           int64          `db:"shipping_cents" json:"shipping_cents"`
	TotalCents              int64          `db:"total_cents" json:"total_cents"`
	Status                  sql.NullString `db:"status" json:"status"`
	Notes                   sql.NullString `db:"notes" json:"notes"`
	StripePaymentIntentID   sql.NullString `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	StripeCustomerID        sql.NullString `db:"stripe_customer_id" json:"stripe_customer_id"`
	StripeCheckoutSessionID sql.NullString `db:"stripe_checkout_session_id" json:"stripe_checkout_session_id"`
	TrackingNumber          sql.NullString `db:"tracking_number" json:"tracking_number"`
	TrackingUrl             sql.NullString `db:"tracking_url" json:"tracking_url"`
	Carrier                 sql.NullString `db:"carrier" json:"carrier"`
	CreatedAt               sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt               sql.NullTime   `db:"updated_at" json:"updated_at"`
	EasypostShipmentID      sql.NullString `db:"easypost_shipment_id" json:"easypost_shipment_id"`
	EasypostLabelUrl        sql.NullString `db:"easypost_label_url" json:"easypost_label_url"`
	OriginalSubtotalCents   sql.NullInt64  `db:"original_subtotal_cents" json:"original_subtotal_cents"`
	DiscountCents           sql.NullInt64  `db:"discount_cents" json:"discount_cents"`
	PromotionCode           sql.NullString `db:"promotion_code" json:"promotion_code"`
	PromotionCodeID         sql.NullString `db:"promotion_code_id" json:"promotion_code_id"`
	OrderItems              string         `db:"order_items" json:"order_items"`
}

func (q *Queries) GetOrderWithItems(ctx context.Context, id string) (GetOrderWithItemsRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderWithItems, id)
	var i GetOrderWithItemsRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingState,
		&i.ShippingPostalCode,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.TaxCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Status,
		&i.Notes,
		&i.StripePaymentIntentID,
		&i.StripeCustomerID,
		&i.StripeCheckoutSessionID,
		&i.TrackingNumber,
		&i.TrackingUrl,
		&i.Carrier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EasypostShipmentID,
		&i.EasypostLabelUrl,
		&i.OriginalSubtotalCents,
		&i.DiscountCents,
		&i.PromotionCode,
		&i.PromotionCodeID,
		&i.OrderItems,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id FROM orders 
ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CustomerName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.ShippingAddressLine1,
			&i.ShippingAddressLine2,
			&i.ShippingCity,
			&i.ShippingState,
			&i.ShippingPostalCode,
			&i.ShippingCountry,
			&i.SubtotalCents,
			&i.TaxCents,
			&i.ShippingCents,
			&i.TotalCents,
			&i.Status,
			&i.Notes,
			&i.StripePaymentIntentID,
			&i.StripeCustomerID,
			&i.StripeCheckoutSessionID,
			&i.TrackingNumber,
			&i.TrackingUrl,
			&i.Carrier,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EasypostShipmentID,
			&i.EasypostLabelUrl,
			&i.OriginalSubtotalCents,
			&i.DiscountCents,
			&i.PromotionCode,
			&i.PromotionCodeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByStatus = `-- name: ListOrdersByStatus :many
SELECT id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id FROM orders 
WHERE status = ? 
ORDER BY created_at DESC
`

func (q *Queries) ListOrdersByStatus(ctx context.Context, status sql.NullString) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CustomerName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.ShippingAddressLine1,
			&i.ShippingAddressLine2,
			&i.ShippingCity,
			&i.ShippingState,
			&i.ShippingPostalCode,
			&i.ShippingCountry,
			&i.SubtotalCents,
			&i.TaxCents,
			&i.ShippingCents,
			&i.TotalCents,
			&i.Status,
			&i.Notes,
			&i.StripePaymentIntentID,
			&i.StripeCustomerID,
			&i.StripeCheckoutSessionID,
			&i.TrackingNumber,
			&i.TrackingUrl,
			&i.Carrier,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EasypostShipmentID,
			&i.EasypostLabelUrl,
			&i.OriginalSubtotalCents,
			&i.DiscountCents,
			&i.PromotionCode,
			&i.PromotionCodeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByUser = `-- name: ListOrdersByUser :many
SELECT id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id FROM orders
WHERE user_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListOrdersByUser(ctx context.Context, userID string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CustomerName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.ShippingAddressLine1,
			&i.ShippingAddressLine2,
			&i.ShippingCity,
			&i.ShippingState,
			&i.ShippingPostalCode,
			&i.ShippingCountry,
			&i.SubtotalCents,
			&i.TaxCents,
			&i.ShippingCents,
			&i.TotalCents,
			&i.Status,
			&i.Notes,
			&i.StripePaymentIntentID,
			&i.StripeCustomerID,
			&i.StripeCheckoutSessionID,
			&i.TrackingNumber,
			&i.TrackingUrl,
			&i.Carrier,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EasypostShipmentID,
			&i.EasypostLabelUrl,
			&i.OriginalSubtotalCents,
			&i.DiscountCents,
			&i.PromotionCode,
			&i.PromotionCodeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderLabel = `-- name: UpdateOrderLabel :one
UPDATE orders
SET easypost_label_url = ?, tracking_number = ?, carrier = ?, status = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id
`

type UpdateOrderLabelParams struct {
	EasypostLabelUrl sql.NullString `db:"easypost_label_url" json:"easypost_label_url"`
	TrackingNumber   sql.NullString `db:"tracking_number" json:"tracking_number"`
	Carrier          sql.NullString `db:"carrier" json:"carrier"`
	Status           sql.NullString `db:"status" json:"status"`
	ID               string         `db:"id" json:"id"`
}

func (q *Queries) UpdateOrderLabel(ctx context.Context, arg UpdateOrderLabelParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderLabel,
		arg.EasypostLabelUrl,
		arg.TrackingNumber,
		arg.Carrier,
		arg.Status,
		arg.ID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingState,
		&i.ShippingPostalCode,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.TaxCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Status,
		&i.Notes,
		&i.StripePaymentIntentID,
		&i.StripeCustomerID,
		&i.StripeCheckoutSessionID,
		&i.TrackingNumber,
		&i.TrackingUrl,
		&i.Carrier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EasypostShipmentID,
		&i.EasypostLabelUrl,
		&i.OriginalSubtotalCents,
		&i.DiscountCents,
		&i.PromotionCode,
		&i.PromotionCodeID,
	)
	return i, err
}

const updateOrderNotes = `-- name: UpdateOrderNotes :one
UPDATE orders 
SET notes = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id
`

type UpdateOrderNotesParams struct {
	Notes sql.NullString `db:"notes" json:"notes"`
	ID    string         `db:"id" json:"id"`
}

func (q *Queries) UpdateOrderNotes(ctx context.Context, arg UpdateOrderNotesParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderNotes, arg.Notes, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingState,
		&i.ShippingPostalCode,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.TaxCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Status,
		&i.Notes,
		&i.StripePaymentIntentID,
		&i.StripeCustomerID,
		&i.StripeCheckoutSessionID,
		&i.TrackingNumber,
		&i.TrackingUrl,
		&i.Carrier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EasypostShipmentID,
		&i.EasypostLabelUrl,
		&i.OriginalSubtotalCents,
		&i.DiscountCents,
		&i.PromotionCode,
		&i.PromotionCodeID,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders 
SET status = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id
`

type UpdateOrderStatusParams struct {
	Status sql.NullString `db:"status" json:"status"`
	ID     string         `db:"id" json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingState,
		&i.ShippingPostalCode,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.TaxCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Status,
		&i.Notes,
		&i.StripePaymentIntentID,
		&i.StripeCustomerID,
		&i.StripeCheckoutSessionID,
		&i.TrackingNumber,
		&i.TrackingUrl,
		&i.Carrier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EasypostShipmentID,
		&i.EasypostLabelUrl,
		&i.OriginalSubtotalCents,
		&i.DiscountCents,
		&i.PromotionCode,
		&i.PromotionCodeID,
	)
	return i, err
}

const updateOrderTracking = `-- name: UpdateOrderTracking :one
UPDATE orders
SET tracking_number = ?, tracking_url = ?, carrier = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, user_id, customer_name, customer_email, customer_phone, shipping_address_line1, shipping_address_line2, shipping_city, shipping_state, shipping_postal_code, shipping_country, subtotal_cents, tax_cents, shipping_cents, total_cents, status, notes, stripe_payment_intent_id, stripe_customer_id, stripe_checkout_session_id, tracking_number, tracking_url, carrier, created_at, updated_at, easypost_shipment_id, easypost_label_url, original_subtotal_cents, discount_cents, promotion_code, promotion_code_id
`

type UpdateOrderTrackingParams struct {
	TrackingNumber sql.NullString `db:"tracking_number" json:"tracking_number"`
	TrackingUrl    sql.NullString `db:"tracking_url" json:"tracking_url"`
	Carrier        sql.NullString `db:"carrier" json:"carrier"`
	ID             string         `db:"id" json:"id"`
}

func (q *Queries) UpdateOrderTracking(ctx context.Context, arg UpdateOrderTrackingParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderTracking,
		arg.TrackingNumber,
		arg.TrackingUrl,
		arg.Carrier,
		arg.ID,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ShippingAddressLine1,
		&i.ShippingAddressLine2,
		&i.ShippingCity,
		&i.ShippingState,
		&i.ShippingPostalCode,
		&i.ShippingCountry,
		&i.SubtotalCents,
		&i.TaxCents,
		&i.ShippingCents,
		&i.TotalCents,
		&i.Status,
		&i.Notes,
		&i.StripePaymentIntentID,
		&i.StripeCustomerID,
		&i.StripeCheckoutSessionID,
		&i.TrackingNumber,
		&i.TrackingUrl,
		&i.Carrier,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EasypostShipmentID,
		&i.EasypostLabelUrl,
		&i.OriginalSubtotalCents,
		&i.DiscountCents,
		&i.PromotionCode,
		&i.PromotionCodeID,
	)
	return i, err
}
