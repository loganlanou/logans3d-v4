// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    id, name, slug, description, short_description, price_cents, 
    category_id, sku, stock_quantity, weight_grams, lead_time_days, 
    is_active, is_featured
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, slug, description, short_description, price_cents, category_id, sku, stock_quantity, low_stock_threshold, weight_grams, dimensions_length_mm, dimensions_width_mm, dimensions_height_mm, lead_time_days, is_active, is_featured, created_at, updated_at
`

type CreateProductParams struct {
	ID               string         `db:"id" json:"id"`
	Name             string         `db:"name" json:"name"`
	Slug             string         `db:"slug" json:"slug"`
	Description      sql.NullString `db:"description" json:"description"`
	ShortDescription sql.NullString `db:"short_description" json:"short_description"`
	PriceCents       int64          `db:"price_cents" json:"price_cents"`
	CategoryID       sql.NullString `db:"category_id" json:"category_id"`
	Sku              sql.NullString `db:"sku" json:"sku"`
	StockQuantity    sql.NullInt64  `db:"stock_quantity" json:"stock_quantity"`
	WeightGrams      sql.NullInt64  `db:"weight_grams" json:"weight_grams"`
	LeadTimeDays     sql.NullInt64  `db:"lead_time_days" json:"lead_time_days"`
	IsActive         sql.NullBool   `db:"is_active" json:"is_active"`
	IsFeatured       sql.NullBool   `db:"is_featured" json:"is_featured"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.ShortDescription,
		arg.PriceCents,
		arg.CategoryID,
		arg.Sku,
		arg.StockQuantity,
		arg.WeightGrams,
		arg.LeadTimeDays,
		arg.IsActive,
		arg.IsFeatured,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ShortDescription,
		&i.PriceCents,
		&i.CategoryID,
		&i.Sku,
		&i.StockQuantity,
		&i.LowStockThreshold,
		&i.WeightGrams,
		&i.DimensionsLengthMm,
		&i.DimensionsWidthMm,
		&i.DimensionsHeightMm,
		&i.LeadTimeDays,
		&i.IsActive,
		&i.IsFeatured,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, slug, description, short_description, price_cents, category_id, sku, stock_quantity, low_stock_threshold, weight_grams, dimensions_length_mm, dimensions_width_mm, dimensions_height_mm, lead_time_days, is_active, is_featured, created_at, updated_at FROM products WHERE id = ?
`

func (q *Queries) GetProduct(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ShortDescription,
		&i.PriceCents,
		&i.CategoryID,
		&i.Sku,
		&i.StockQuantity,
		&i.LowStockThreshold,
		&i.WeightGrams,
		&i.DimensionsLengthMm,
		&i.DimensionsWidthMm,
		&i.DimensionsHeightMm,
		&i.LeadTimeDays,
		&i.IsActive,
		&i.IsFeatured,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductBySlug = `-- name: GetProductBySlug :one
SELECT id, name, slug, description, short_description, price_cents, category_id, sku, stock_quantity, low_stock_threshold, weight_grams, dimensions_length_mm, dimensions_width_mm, dimensions_height_mm, lead_time_days, is_active, is_featured, created_at, updated_at FROM products WHERE slug = ? AND is_active = TRUE
`

func (q *Queries) GetProductBySlug(ctx context.Context, slug string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductBySlug, slug)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ShortDescription,
		&i.PriceCents,
		&i.CategoryID,
		&i.Sku,
		&i.StockQuantity,
		&i.LowStockThreshold,
		&i.WeightGrams,
		&i.DimensionsLengthMm,
		&i.DimensionsWidthMm,
		&i.DimensionsHeightMm,
		&i.LeadTimeDays,
		&i.IsActive,
		&i.IsFeatured,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductImages = `-- name: GetProductImages :many
SELECT id, product_id, image_url, alt_text, display_order, is_primary, created_at FROM product_images 
WHERE product_id = ? 
ORDER BY display_order ASC, is_primary DESC
`

func (q *Queries) GetProductImages(ctx context.Context, productID string) ([]ProductImage, error) {
	rows, err := q.db.QueryContext(ctx, getProductImages, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductImage{}
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.ImageUrl,
			&i.AltText,
			&i.DisplayOrder,
			&i.IsPrimary,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeaturedProducts = `-- name: ListFeaturedProducts :many
SELECT id, name, slug, description, short_description, price_cents, category_id, sku, stock_quantity, low_stock_threshold, weight_grams, dimensions_length_mm, dimensions_width_mm, dimensions_height_mm, lead_time_days, is_active, is_featured, created_at, updated_at FROM products 
WHERE is_featured = TRUE AND is_active = TRUE 
ORDER BY created_at DESC
`

func (q *Queries) ListFeaturedProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listFeaturedProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ShortDescription,
			&i.PriceCents,
			&i.CategoryID,
			&i.Sku,
			&i.StockQuantity,
			&i.LowStockThreshold,
			&i.WeightGrams,
			&i.DimensionsLengthMm,
			&i.DimensionsWidthMm,
			&i.DimensionsHeightMm,
			&i.LeadTimeDays,
			&i.IsActive,
			&i.IsFeatured,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, slug, description, short_description, price_cents, category_id, sku, stock_quantity, low_stock_threshold, weight_grams, dimensions_length_mm, dimensions_width_mm, dimensions_height_mm, lead_time_days, is_active, is_featured, created_at, updated_at FROM products 
WHERE is_active = TRUE 
ORDER BY created_at DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ShortDescription,
			&i.PriceCents,
			&i.CategoryID,
			&i.Sku,
			&i.StockQuantity,
			&i.LowStockThreshold,
			&i.WeightGrams,
			&i.DimensionsLengthMm,
			&i.DimensionsWidthMm,
			&i.DimensionsHeightMm,
			&i.LeadTimeDays,
			&i.IsActive,
			&i.IsFeatured,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT id, name, slug, description, short_description, price_cents, category_id, sku, stock_quantity, low_stock_threshold, weight_grams, dimensions_length_mm, dimensions_width_mm, dimensions_height_mm, lead_time_days, is_active, is_featured, created_at, updated_at FROM products 
WHERE category_id = ? AND is_active = TRUE 
ORDER BY created_at DESC
`

func (q *Queries) ListProductsByCategory(ctx context.Context, categoryID sql.NullString) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ShortDescription,
			&i.PriceCents,
			&i.CategoryID,
			&i.Sku,
			&i.StockQuantity,
			&i.LowStockThreshold,
			&i.WeightGrams,
			&i.DimensionsLengthMm,
			&i.DimensionsWidthMm,
			&i.DimensionsHeightMm,
			&i.LeadTimeDays,
			&i.IsActive,
			&i.IsFeatured,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProducts = `-- name: SearchProducts :many
SELECT id, name, slug, description, short_description, price_cents, category_id, sku, stock_quantity, low_stock_threshold, weight_grams, dimensions_length_mm, dimensions_width_mm, dimensions_height_mm, lead_time_days, is_active, is_featured, created_at, updated_at FROM products 
WHERE (name LIKE '%' || ? || '%' OR description LIKE '%' || ? || '%') 
AND is_active = TRUE 
ORDER BY created_at DESC
`

type SearchProductsParams struct {
	Column1 sql.NullString `db:"column_1" json:"column_1"`
	Column2 sql.NullString `db:"column_2" json:"column_2"`
}

func (q *Queries) SearchProducts(ctx context.Context, arg SearchProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, searchProducts, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.ShortDescription,
			&i.PriceCents,
			&i.CategoryID,
			&i.Sku,
			&i.StockQuantity,
			&i.LowStockThreshold,
			&i.WeightGrams,
			&i.DimensionsLengthMm,
			&i.DimensionsWidthMm,
			&i.DimensionsHeightMm,
			&i.LeadTimeDays,
			&i.IsActive,
			&i.IsFeatured,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products 
SET name = ?, slug = ?, description = ?, short_description = ?, 
    price_cents = ?, category_id = ?, sku = ?, stock_quantity = ?, 
    weight_grams = ?, lead_time_days = ?, is_active = ?, is_featured = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, slug, description, short_description, price_cents, category_id, sku, stock_quantity, low_stock_threshold, weight_grams, dimensions_length_mm, dimensions_width_mm, dimensions_height_mm, lead_time_days, is_active, is_featured, created_at, updated_at
`

type UpdateProductParams struct {
	Name             string         `db:"name" json:"name"`
	Slug             string         `db:"slug" json:"slug"`
	Description      sql.NullString `db:"description" json:"description"`
	ShortDescription sql.NullString `db:"short_description" json:"short_description"`
	PriceCents       int64          `db:"price_cents" json:"price_cents"`
	CategoryID       sql.NullString `db:"category_id" json:"category_id"`
	Sku              sql.NullString `db:"sku" json:"sku"`
	StockQuantity    sql.NullInt64  `db:"stock_quantity" json:"stock_quantity"`
	WeightGrams      sql.NullInt64  `db:"weight_grams" json:"weight_grams"`
	LeadTimeDays     sql.NullInt64  `db:"lead_time_days" json:"lead_time_days"`
	IsActive         sql.NullBool   `db:"is_active" json:"is_active"`
	IsFeatured       sql.NullBool   `db:"is_featured" json:"is_featured"`
	ID               string         `db:"id" json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.ShortDescription,
		arg.PriceCents,
		arg.CategoryID,
		arg.Sku,
		arg.StockQuantity,
		arg.WeightGrams,
		arg.LeadTimeDays,
		arg.IsActive,
		arg.IsFeatured,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.ShortDescription,
		&i.PriceCents,
		&i.CategoryID,
		&i.Sku,
		&i.StockQuantity,
		&i.LowStockThreshold,
		&i.WeightGrams,
		&i.DimensionsLengthMm,
		&i.DimensionsWidthMm,
		&i.DimensionsHeightMm,
		&i.LeadTimeDays,
		&i.IsActive,
		&i.IsFeatured,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProductStock = `-- name: UpdateProductStock :exec
UPDATE products 
SET stock_quantity = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateProductStockParams struct {
	StockQuantity sql.NullInt64 `db:"stock_quantity" json:"stock_quantity"`
	ID            string        `db:"id" json:"id"`
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) error {
	_, err := q.db.ExecContext(ctx, updateProductStock, arg.StockQuantity, arg.ID)
	return err
}
