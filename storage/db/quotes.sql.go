// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: quotes.sql

package db

import (
	"context"
	"database/sql"
)

const createQuoteFile = `-- name: CreateQuoteFile :one
INSERT INTO quote_files (
    id, quote_request_id, filename, original_filename, file_path, file_size, mime_type
) VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, quote_request_id, filename, original_filename, file_path, file_size, mime_type, created_at
`

type CreateQuoteFileParams struct {
	ID               string `db:"id" json:"id"`
	QuoteRequestID   string `db:"quote_request_id" json:"quote_request_id"`
	Filename         string `db:"filename" json:"filename"`
	OriginalFilename string `db:"original_filename" json:"original_filename"`
	FilePath         string `db:"file_path" json:"file_path"`
	FileSize         int64  `db:"file_size" json:"file_size"`
	MimeType         string `db:"mime_type" json:"mime_type"`
}

func (q *Queries) CreateQuoteFile(ctx context.Context, arg CreateQuoteFileParams) (QuoteFile, error) {
	row := q.db.QueryRowContext(ctx, createQuoteFile,
		arg.ID,
		arg.QuoteRequestID,
		arg.Filename,
		arg.OriginalFilename,
		arg.FilePath,
		arg.FileSize,
		arg.MimeType,
	)
	var i QuoteFile
	err := row.Scan(
		&i.ID,
		&i.QuoteRequestID,
		&i.Filename,
		&i.OriginalFilename,
		&i.FilePath,
		&i.FileSize,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}

const createQuoteRequest = `-- name: CreateQuoteRequest :one
INSERT INTO quote_requests (
    id, customer_name, customer_email, customer_phone, project_description,
    quantity, material_preference, finish_preference, deadline_date, budget_range,
    status, admin_notes, quoted_price_cents
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, customer_name, customer_email, customer_phone, project_description, quantity, material_preference, finish_preference, deadline_date, budget_range, status, admin_notes, quoted_price_cents, created_at, updated_at
`

type CreateQuoteRequestParams struct {
	ID                 string         `db:"id" json:"id"`
	CustomerName       string         `db:"customer_name" json:"customer_name"`
	CustomerEmail      string         `db:"customer_email" json:"customer_email"`
	CustomerPhone      sql.NullString `db:"customer_phone" json:"customer_phone"`
	ProjectDescription string         `db:"project_description" json:"project_description"`
	Quantity           sql.NullInt64  `db:"quantity" json:"quantity"`
	MaterialPreference sql.NullString `db:"material_preference" json:"material_preference"`
	FinishPreference   sql.NullString `db:"finish_preference" json:"finish_preference"`
	DeadlineDate       sql.NullTime   `db:"deadline_date" json:"deadline_date"`
	BudgetRange        sql.NullString `db:"budget_range" json:"budget_range"`
	Status             sql.NullString `db:"status" json:"status"`
	AdminNotes         sql.NullString `db:"admin_notes" json:"admin_notes"`
	QuotedPriceCents   sql.NullInt64  `db:"quoted_price_cents" json:"quoted_price_cents"`
}

func (q *Queries) CreateQuoteRequest(ctx context.Context, arg CreateQuoteRequestParams) (QuoteRequest, error) {
	row := q.db.QueryRowContext(ctx, createQuoteRequest,
		arg.ID,
		arg.CustomerName,
		arg.CustomerEmail,
		arg.CustomerPhone,
		arg.ProjectDescription,
		arg.Quantity,
		arg.MaterialPreference,
		arg.FinishPreference,
		arg.DeadlineDate,
		arg.BudgetRange,
		arg.Status,
		arg.AdminNotes,
		arg.QuotedPriceCents,
	)
	var i QuoteRequest
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ProjectDescription,
		&i.Quantity,
		&i.MaterialPreference,
		&i.FinishPreference,
		&i.DeadlineDate,
		&i.BudgetRange,
		&i.Status,
		&i.AdminNotes,
		&i.QuotedPriceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteQuoteFile = `-- name: DeleteQuoteFile :exec
DELETE FROM quote_files WHERE id = ?
`

func (q *Queries) DeleteQuoteFile(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteQuoteFile, id)
	return err
}

const deleteQuoteRequest = `-- name: DeleteQuoteRequest :exec
DELETE FROM quote_requests WHERE id = ?
`

func (q *Queries) DeleteQuoteRequest(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteQuoteRequest, id)
	return err
}

const getQuoteFiles = `-- name: GetQuoteFiles :many
SELECT id, quote_request_id, filename, original_filename, file_path, file_size, mime_type, created_at FROM quote_files WHERE quote_request_id = ?
`

func (q *Queries) GetQuoteFiles(ctx context.Context, quoteRequestID string) ([]QuoteFile, error) {
	rows, err := q.db.QueryContext(ctx, getQuoteFiles, quoteRequestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuoteFile{}
	for rows.Next() {
		var i QuoteFile
		if err := rows.Scan(
			&i.ID,
			&i.QuoteRequestID,
			&i.Filename,
			&i.OriginalFilename,
			&i.FilePath,
			&i.FileSize,
			&i.MimeType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuoteRequest = `-- name: GetQuoteRequest :one
SELECT id, customer_name, customer_email, customer_phone, project_description, quantity, material_preference, finish_preference, deadline_date, budget_range, status, admin_notes, quoted_price_cents, created_at, updated_at FROM quote_requests WHERE id = ?
`

func (q *Queries) GetQuoteRequest(ctx context.Context, id string) (QuoteRequest, error) {
	row := q.db.QueryRowContext(ctx, getQuoteRequest, id)
	var i QuoteRequest
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ProjectDescription,
		&i.Quantity,
		&i.MaterialPreference,
		&i.FinishPreference,
		&i.DeadlineDate,
		&i.BudgetRange,
		&i.Status,
		&i.AdminNotes,
		&i.QuotedPriceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuoteRequestWithFiles = `-- name: GetQuoteRequestWithFiles :one
SELECT 
    q.id, q.customer_name, q.customer_email, q.customer_phone, q.project_description, q.quantity, q.material_preference, q.finish_preference, q.deadline_date, q.budget_range, q.status, q.admin_notes, q.quoted_price_cents, q.created_at, q.updated_at,
    GROUP_CONCAT(
        qf.id || ',' || qf.filename || ',' || qf.original_filename || ',' || 
        qf.file_path || ',' || qf.file_size || ',' || qf.mime_type
    ) as quote_files
FROM quote_requests q
LEFT JOIN quote_files qf ON q.id = qf.quote_request_id
WHERE q.id = ?
GROUP BY q.id
`

type GetQuoteRequestWithFilesRow struct {
	ID                 string         `db:"id" json:"id"`
	CustomerName       string         `db:"customer_name" json:"customer_name"`
	CustomerEmail      string         `db:"customer_email" json:"customer_email"`
	CustomerPhone      sql.NullString `db:"customer_phone" json:"customer_phone"`
	ProjectDescription string         `db:"project_description" json:"project_description"`
	Quantity           sql.NullInt64  `db:"quantity" json:"quantity"`
	MaterialPreference sql.NullString `db:"material_preference" json:"material_preference"`
	FinishPreference   sql.NullString `db:"finish_preference" json:"finish_preference"`
	DeadlineDate       sql.NullTime   `db:"deadline_date" json:"deadline_date"`
	BudgetRange        sql.NullString `db:"budget_range" json:"budget_range"`
	Status             sql.NullString `db:"status" json:"status"`
	AdminNotes         sql.NullString `db:"admin_notes" json:"admin_notes"`
	QuotedPriceCents   sql.NullInt64  `db:"quoted_price_cents" json:"quoted_price_cents"`
	CreatedAt          sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt          sql.NullTime   `db:"updated_at" json:"updated_at"`
	QuoteFiles         string         `db:"quote_files" json:"quote_files"`
}

func (q *Queries) GetQuoteRequestWithFiles(ctx context.Context, id string) (GetQuoteRequestWithFilesRow, error) {
	row := q.db.QueryRowContext(ctx, getQuoteRequestWithFiles, id)
	var i GetQuoteRequestWithFilesRow
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ProjectDescription,
		&i.Quantity,
		&i.MaterialPreference,
		&i.FinishPreference,
		&i.DeadlineDate,
		&i.BudgetRange,
		&i.Status,
		&i.AdminNotes,
		&i.QuotedPriceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.QuoteFiles,
	)
	return i, err
}

const getQuoteStats = `-- name: GetQuoteStats :one
SELECT 
    COUNT(*) as total_quotes,
    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_quotes,
    COUNT(CASE WHEN status = 'reviewing' THEN 1 END) as reviewing_quotes,
    COUNT(CASE WHEN status = 'quoted' THEN 1 END) as quoted_quotes,
    COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved_quotes,
    COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected_quotes,
    SUM(CASE WHEN quoted_price_cents IS NOT NULL THEN quoted_price_cents ELSE 0 END) as total_quoted_value_cents,
    AVG(CASE WHEN quoted_price_cents IS NOT NULL THEN quoted_price_cents ELSE 0 END) as average_quote_value_cents
FROM quote_requests
`

type GetQuoteStatsRow struct {
	TotalQuotes            int64           `db:"total_quotes" json:"total_quotes"`
	PendingQuotes          int64           `db:"pending_quotes" json:"pending_quotes"`
	ReviewingQuotes        int64           `db:"reviewing_quotes" json:"reviewing_quotes"`
	QuotedQuotes           int64           `db:"quoted_quotes" json:"quoted_quotes"`
	ApprovedQuotes         int64           `db:"approved_quotes" json:"approved_quotes"`
	RejectedQuotes         int64           `db:"rejected_quotes" json:"rejected_quotes"`
	TotalQuotedValueCents  sql.NullFloat64 `db:"total_quoted_value_cents" json:"total_quoted_value_cents"`
	AverageQuoteValueCents sql.NullFloat64 `db:"average_quote_value_cents" json:"average_quote_value_cents"`
}

func (q *Queries) GetQuoteStats(ctx context.Context) (GetQuoteStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getQuoteStats)
	var i GetQuoteStatsRow
	err := row.Scan(
		&i.TotalQuotes,
		&i.PendingQuotes,
		&i.ReviewingQuotes,
		&i.QuotedQuotes,
		&i.ApprovedQuotes,
		&i.RejectedQuotes,
		&i.TotalQuotedValueCents,
		&i.AverageQuoteValueCents,
	)
	return i, err
}

const listQuoteRequests = `-- name: ListQuoteRequests :many
SELECT id, customer_name, customer_email, customer_phone, project_description, quantity, material_preference, finish_preference, deadline_date, budget_range, status, admin_notes, quoted_price_cents, created_at, updated_at FROM quote_requests 
ORDER BY created_at DESC
`

func (q *Queries) ListQuoteRequests(ctx context.Context) ([]QuoteRequest, error) {
	rows, err := q.db.QueryContext(ctx, listQuoteRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuoteRequest{}
	for rows.Next() {
		var i QuoteRequest
		if err := rows.Scan(
			&i.ID,
			&i.CustomerName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.ProjectDescription,
			&i.Quantity,
			&i.MaterialPreference,
			&i.FinishPreference,
			&i.DeadlineDate,
			&i.BudgetRange,
			&i.Status,
			&i.AdminNotes,
			&i.QuotedPriceCents,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuoteRequestsByStatus = `-- name: ListQuoteRequestsByStatus :many
SELECT id, customer_name, customer_email, customer_phone, project_description, quantity, material_preference, finish_preference, deadline_date, budget_range, status, admin_notes, quoted_price_cents, created_at, updated_at FROM quote_requests 
WHERE status = ? 
ORDER BY created_at DESC
`

func (q *Queries) ListQuoteRequestsByStatus(ctx context.Context, status sql.NullString) ([]QuoteRequest, error) {
	rows, err := q.db.QueryContext(ctx, listQuoteRequestsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuoteRequest{}
	for rows.Next() {
		var i QuoteRequest
		if err := rows.Scan(
			&i.ID,
			&i.CustomerName,
			&i.CustomerEmail,
			&i.CustomerPhone,
			&i.ProjectDescription,
			&i.Quantity,
			&i.MaterialPreference,
			&i.FinishPreference,
			&i.DeadlineDate,
			&i.BudgetRange,
			&i.Status,
			&i.AdminNotes,
			&i.QuotedPriceCents,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuoteRequest = `-- name: UpdateQuoteRequest :one
UPDATE quote_requests 
SET customer_name = ?, customer_email = ?, customer_phone = ?, project_description = ?,
    quantity = ?, material_preference = ?, finish_preference = ?, deadline_date = ?, 
    budget_range = ?, status = ?, admin_notes = ?, quoted_price_cents = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, customer_name, customer_email, customer_phone, project_description, quantity, material_preference, finish_preference, deadline_date, budget_range, status, admin_notes, quoted_price_cents, created_at, updated_at
`

type UpdateQuoteRequestParams struct {
	CustomerName       string         `db:"customer_name" json:"customer_name"`
	CustomerEmail      string         `db:"customer_email" json:"customer_email"`
	CustomerPhone      sql.NullString `db:"customer_phone" json:"customer_phone"`
	ProjectDescription string         `db:"project_description" json:"project_description"`
	Quantity           sql.NullInt64  `db:"quantity" json:"quantity"`
	MaterialPreference sql.NullString `db:"material_preference" json:"material_preference"`
	FinishPreference   sql.NullString `db:"finish_preference" json:"finish_preference"`
	DeadlineDate       sql.NullTime   `db:"deadline_date" json:"deadline_date"`
	BudgetRange        sql.NullString `db:"budget_range" json:"budget_range"`
	Status             sql.NullString `db:"status" json:"status"`
	AdminNotes         sql.NullString `db:"admin_notes" json:"admin_notes"`
	QuotedPriceCents   sql.NullInt64  `db:"quoted_price_cents" json:"quoted_price_cents"`
	ID                 string         `db:"id" json:"id"`
}

func (q *Queries) UpdateQuoteRequest(ctx context.Context, arg UpdateQuoteRequestParams) (QuoteRequest, error) {
	row := q.db.QueryRowContext(ctx, updateQuoteRequest,
		arg.CustomerName,
		arg.CustomerEmail,
		arg.CustomerPhone,
		arg.ProjectDescription,
		arg.Quantity,
		arg.MaterialPreference,
		arg.FinishPreference,
		arg.DeadlineDate,
		arg.BudgetRange,
		arg.Status,
		arg.AdminNotes,
		arg.QuotedPriceCents,
		arg.ID,
	)
	var i QuoteRequest
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ProjectDescription,
		&i.Quantity,
		&i.MaterialPreference,
		&i.FinishPreference,
		&i.DeadlineDate,
		&i.BudgetRange,
		&i.Status,
		&i.AdminNotes,
		&i.QuotedPriceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQuoteRequestNotes = `-- name: UpdateQuoteRequestNotes :one
UPDATE quote_requests 
SET admin_notes = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, customer_name, customer_email, customer_phone, project_description, quantity, material_preference, finish_preference, deadline_date, budget_range, status, admin_notes, quoted_price_cents, created_at, updated_at
`

type UpdateQuoteRequestNotesParams struct {
	AdminNotes sql.NullString `db:"admin_notes" json:"admin_notes"`
	ID         string         `db:"id" json:"id"`
}

func (q *Queries) UpdateQuoteRequestNotes(ctx context.Context, arg UpdateQuoteRequestNotesParams) (QuoteRequest, error) {
	row := q.db.QueryRowContext(ctx, updateQuoteRequestNotes, arg.AdminNotes, arg.ID)
	var i QuoteRequest
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ProjectDescription,
		&i.Quantity,
		&i.MaterialPreference,
		&i.FinishPreference,
		&i.DeadlineDate,
		&i.BudgetRange,
		&i.Status,
		&i.AdminNotes,
		&i.QuotedPriceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQuoteRequestPrice = `-- name: UpdateQuoteRequestPrice :one
UPDATE quote_requests 
SET quoted_price_cents = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, customer_name, customer_email, customer_phone, project_description, quantity, material_preference, finish_preference, deadline_date, budget_range, status, admin_notes, quoted_price_cents, created_at, updated_at
`

type UpdateQuoteRequestPriceParams struct {
	QuotedPriceCents sql.NullInt64 `db:"quoted_price_cents" json:"quoted_price_cents"`
	ID               string        `db:"id" json:"id"`
}

func (q *Queries) UpdateQuoteRequestPrice(ctx context.Context, arg UpdateQuoteRequestPriceParams) (QuoteRequest, error) {
	row := q.db.QueryRowContext(ctx, updateQuoteRequestPrice, arg.QuotedPriceCents, arg.ID)
	var i QuoteRequest
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ProjectDescription,
		&i.Quantity,
		&i.MaterialPreference,
		&i.FinishPreference,
		&i.DeadlineDate,
		&i.BudgetRange,
		&i.Status,
		&i.AdminNotes,
		&i.QuotedPriceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQuoteRequestStatus = `-- name: UpdateQuoteRequestStatus :one
UPDATE quote_requests 
SET status = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, customer_name, customer_email, customer_phone, project_description, quantity, material_preference, finish_preference, deadline_date, budget_range, status, admin_notes, quoted_price_cents, created_at, updated_at
`

type UpdateQuoteRequestStatusParams struct {
	Status sql.NullString `db:"status" json:"status"`
	ID     string         `db:"id" json:"id"`
}

func (q *Queries) UpdateQuoteRequestStatus(ctx context.Context, arg UpdateQuoteRequestStatusParams) (QuoteRequest, error) {
	row := q.db.QueryRowContext(ctx, updateQuoteRequestStatus, arg.Status, arg.ID)
	var i QuoteRequest
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerEmail,
		&i.CustomerPhone,
		&i.ProjectDescription,
		&i.Quantity,
		&i.MaterialPreference,
		&i.FinishPreference,
		&i.DeadlineDate,
		&i.BudgetRange,
		&i.Status,
		&i.AdminNotes,
		&i.QuotedPriceCents,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
