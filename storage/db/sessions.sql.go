// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (id, user_id, session_token, expires_at, created_at)
VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
RETURNING id, user_id, session_token, expires_at, created_at
`

type CreateSessionParams struct {
	ID           string    `db:"id" json:"id"`
	UserID       string    `db:"user_id" json:"user_id"`
	SessionToken string    `db:"session_token" json:"session_token"`
	ExpiresAt    time.Time `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.SessionToken,
		arg.ExpiresAt,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM user_sessions
WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions
WHERE session_token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, sessionToken string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionToken)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM user_sessions
WHERE user_id = ?
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userID)
	return err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT 
    s.id, s.user_id, s.session_token, s.expires_at, s.created_at,
    u.id AS user_id,
    u.email,
    u.name,
    u.google_id,
    u.avatar_url
FROM user_sessions s
INNER JOIN users u ON s.user_id = u.id
WHERE s.session_token = ? AND s.expires_at > CURRENT_TIMESTAMP
`

type GetSessionByTokenRow struct {
	ID           string         `db:"id" json:"id"`
	UserID       string         `db:"user_id" json:"user_id"`
	SessionToken string         `db:"session_token" json:"session_token"`
	ExpiresAt    time.Time      `db:"expires_at" json:"expires_at"`
	CreatedAt    sql.NullTime   `db:"created_at" json:"created_at"`
	UserID_2     string         `db:"user_id_2" json:"user_id_2"`
	Email        string         `db:"email" json:"email"`
	Name         string         `db:"name" json:"name"`
	GoogleID     sql.NullString `db:"google_id" json:"google_id"`
	AvatarUrl    sql.NullString `db:"avatar_url" json:"avatar_url"`
}

func (q *Queries) GetSessionByToken(ctx context.Context, sessionToken string) (GetSessionByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, sessionToken)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UserID_2,
		&i.Email,
		&i.Name,
		&i.GoogleID,
		&i.AvatarUrl,
	)
	return i, err
}
