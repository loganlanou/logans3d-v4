package admin

import (
	"fmt"
	"github.com/loganlanou/logans3d-v4/internal/types"
	"github.com/loganlanou/logans3d-v4/storage/db"
	"github.com/loganlanou/logans3d-v4/views/layout"
)

templ Dashboard(products []types.ProductWithImage) {
	@layout.AdminBase("Dashboard") {
		@layout.AdminContainer() {
			<!-- Header -->
			<div class="flex justify-between items-center mb-8">
				<h1 class="admin-text-primary admin-text-2xl admin-font-bold">Dashboard</h1>
				<div class="flex space-x-3">
					<a href="/admin/categories" class="admin-btn admin-btn-secondary">
						Manage Categories
					</a>
					<a href="/admin/product/new" class="admin-btn admin-btn-primary">
						+ Add Product
					</a>
				</div>
			</div>

			<!-- Stats Cards -->
			<div class="admin-stats-grid">
				<div class="admin-stat-card">
					<div class="admin-stat-number">{ fmt.Sprintf("%d", len(products)) }</div>
					<div class="admin-stat-label">Total Products</div>
				</div>
				<div class="admin-stat-card">
					<div class="admin-stat-number">{ fmt.Sprintf("%d", countNewItems(products)) }</div>
					<div class="admin-stat-label">New Items (60 days)</div>
				</div>
				<div class="admin-stat-card">
					<div class="admin-stat-number">{ fmt.Sprintf("%d", countDiscontinuedItems(products)) }</div>
					<div class="admin-stat-label">Discontinued Items</div>
				</div>
				<div class="admin-stat-card">
					<div class="admin-stat-number">{ fmt.Sprintf("%d", countLowStock(products)) }</div>
					<div class="admin-stat-label">Low Stock Items</div>
				</div>
			</div>

			<!-- Products Table -->
			<div class="admin-card mt-8">
				<div class="admin-card-header">
					<h2 class="admin-card-title">Products</h2>
				</div>
				<div class="overflow-x-auto">
					<table class="admin-table">
						<thead>
							<tr>
								<th>Image</th>
								<th>Name</th>
								<th>SKU</th>
								<th>Price</th>
								<th>Stock</th>
								<th>Status</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody>
							for _, product := range products {
								<tr>
									<td>
										if product.ImageURL != "" {
											<img src={ product.ImageURL } alt={ product.Product.Name } class="w-12 h-12 object-cover rounded-lg" />
										} else {
											<div class="w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center">
												<span class="admin-text-muted text-xs">No Image</span>
											</div>
										}
									</td>
									<td>
										<div class="flex items-center gap-2">
											<div>
												<div class="admin-text-primary admin-font-medium">{ product.Product.Name }</div>
											</div>
											if product.IsNew {
												<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
													NEW
												</span>
											}
										</div>
									</td>
									<td>
										if product.Product.Sku.Valid {
											{ product.Product.Sku.String }
										} else {
											<span class="admin-text-disabled">-</span>
										}
									</td>
									<td>
										${ fmt.Sprintf("%.2f", float64(product.Product.PriceCents)/100) }
									</td>
									<td>
										if product.Product.StockQuantity.Valid {
											if product.Product.StockQuantity.Int64 <= 5 {
												<span class="admin-text-warning admin-font-medium">{ fmt.Sprintf("%d", product.Product.StockQuantity.Int64) }</span>
											} else {
												{ fmt.Sprintf("%d", product.Product.StockQuantity.Int64) }
											}
										} else {
											<span class="admin-text-disabled">-</span>
										}
									</td>
									<td>
										<div class="flex flex-wrap gap-1">
											if product.Product.IsActive.Valid && product.Product.IsActive.Bool {
												<div class="admin-status admin-status-active">
													<div class="admin-status-dot"></div>
													Active
												</div>
											} else {
												<div class="admin-status admin-status-inactive">
													<div class="admin-status-dot"></div>
													Discontinued (Hidden from site)
												</div>
											}
											if product.Product.IsFeatured.Valid && product.Product.IsFeatured.Bool {
												<div class="admin-status admin-status-featured">
													<div class="admin-status-dot"></div>
													Premium Collection
												</div>
											}
										</div>
									</td>
									<td>
										<div class="flex space-x-2">
											<a href={ templ.SafeURL(fmt.Sprintf("/admin/product/edit?id=%s", product.Product.ID)) } 
											   class="admin-btn admin-btn-sm admin-btn-primary">
												Edit
											</a>
											<form method="POST" action={ templ.SafeURL(fmt.Sprintf("/admin/product/%s/delete", product.Product.ID)) } 
												  onsubmit="return confirm('Are you sure you want to delete this product?');" class="inline">
												<button type="submit" class="admin-btn admin-btn-sm admin-btn-danger">
													Delete
												</button>
											</form>
										</div>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		}
	}
}

func countLowStock(products []types.ProductWithImage) int {
	count := 0
	for _, p := range products {
		if p.Product.StockQuantity.Valid && p.Product.StockQuantity.Int64 <= 5 {
			count++
		}
	}
	return count
}

func getCategoryName(categories []db.Category, categoryID string) string {
	for _, c := range categories {
		if c.ID == categoryID {
			return c.Name
		}
	}
	return "Unknown"
}

func countProductsInCategory(products []types.ProductWithImage, categoryID string) int {
	count := 0
	for _, p := range products {
		if p.Product.CategoryID.Valid && p.Product.CategoryID.String == categoryID {
			count++
		}
	}
	return count
}

func countNewItems(products []types.ProductWithImage) int {
	count := 0
	for _, p := range products {
		if p.IsNew {
			count++
		}
	}
	return count
}

func countDiscontinuedItems(products []types.ProductWithImage) int {
	count := 0
	for _, p := range products {
		if p.IsDiscontinued {
			count++
		}
	}
	return count
}