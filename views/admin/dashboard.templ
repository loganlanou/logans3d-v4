package admin

import (
	"fmt"
	"github.com/labstack/echo/v4"
	"github.com/loganlanou/logans3d-v4/views/layout"
	"github.com/loganlanou/logans3d-v4/components/card"
	"github.com/loganlanou/logans3d-v4/components/button"
	"github.com/loganlanou/logans3d-v4/components/table"
	"github.com/loganlanou/logans3d-v4/storage/db"
)

type DashboardStats struct {
	RevenueToday         int64
	RevenueWeek          int64
	RevenueMonth         int64
	RevenueMonthGrowth   float64
	OrdersToday          int64
	OrdersWeek           int64
	OrdersMonth          int64
	AverageOrderValue    int64
	TotalProducts        int64
	LowStockCount        int64
	OutOfStockCount      int64
	ActiveCartsCount     int64
	AbandonedCarts24h    int64
	AbandonedCarts7d     int64
	AbandonedCarts30d    int64
	CartRecoveryRate     float64
	NewCustomersWeek     int64
	NewCustomersMonth    int64
	PendingQuotes        int64
	NewContactsCount     int64
	OrdersByStatus       db.GetDashboardOrdersByStatusRow
	LowStockProducts     []db.GetDashboardLowStockProductsRow
	RecentOrders         []db.GetDashboardRecentOrdersRow
}

templ Dashboard(c echo.Context, stats DashboardStats) {
	@layout.AdminBase(c, "Dashboard") {
		@layout.AdminContainer() {
			<!-- Header -->
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-2xl font-bold text-gray-100">Dashboard</h1>
				<div class="text-sm text-gray-400">
					Last updated: <span id="last-updated">Just now</span>
				</div>
			</div>

			<!-- Revenue Overview Cards -->
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
				<!-- Today's Revenue -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Today's Revenue</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									${ fmt.Sprintf("%.2f", float64(stats.RevenueToday)/100) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">
									{ fmt.Sprintf("%d orders", stats.OrdersToday) }
								</p>
							</div>
							<div class="p-3 bg-green-900/30 rounded-lg">
								<svg class="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Week Revenue -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">This Week</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									${ fmt.Sprintf("%.2f", float64(stats.RevenueWeek)/100) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">
									{ fmt.Sprintf("%d orders", stats.OrdersWeek) }
								</p>
							</div>
							<div class="p-3 bg-blue-900/30 rounded-lg">
								<svg class="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Month Revenue -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">This Month</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									${ fmt.Sprintf("%.2f", float64(stats.RevenueMonth)/100) }
								</h3>
								<div class="flex items-center gap-2 mt-1">
									<p class="text-xs text-gray-500">
										{ fmt.Sprintf("%d orders", stats.OrdersMonth) }
									</p>
									if stats.RevenueMonthGrowth > 0 {
										<span class="text-xs text-green-400 flex items-center">
											↑ { fmt.Sprintf("%.1f%%", stats.RevenueMonthGrowth) }
										</span>
									} else if stats.RevenueMonthGrowth < 0 {
										<span class="text-xs text-red-400 flex items-center">
											↓ { fmt.Sprintf("%.1f%%", -stats.RevenueMonthGrowth) }
										</span>
									}
								</div>
							</div>
							<div class="p-3 bg-purple-900/30 rounded-lg">
								<svg class="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Average Order Value -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Avg. Order Value</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									${ fmt.Sprintf("%.2f", float64(stats.AverageOrderValue)/100) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">Last 30 days</p>
							</div>
							<div class="p-3 bg-yellow-900/30 rounded-lg">
								<svg class="w-8 h-8 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
								</svg>
							</div>
						</div>
					}
				}
			</div>

			<!-- Orders & Inventory Section -->
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
				<!-- Orders by Status -->
				@card.Card() {
					@card.Header() {
						@card.Title() {
							Orders by Status
						}
					}
					@card.Content() {
						<div class="space-y-3">
							<div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
								<div class="flex items-center gap-3">
									<div class="w-2 h-2 bg-yellow-400 rounded-full"></div>
									<span class="text-sm text-gray-300">Pending</span>
								</div>
								<span class="text-sm font-medium text-gray-100">{ fmt.Sprintf("%d", stats.OrdersByStatus.PendingOrders) }</span>
							</div>
							<div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
								<div class="flex items-center gap-3">
									<div class="w-2 h-2 bg-blue-400 rounded-full"></div>
									<span class="text-sm text-gray-300">Received</span>
								</div>
								<span class="text-sm font-medium text-gray-100">{ fmt.Sprintf("%d", stats.OrdersByStatus.ReceivedOrders) }</span>
							</div>
							<div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
								<div class="flex items-center gap-3">
									<div class="w-2 h-2 bg-purple-400 rounded-full"></div>
									<span class="text-sm text-gray-300">In Production</span>
								</div>
								<span class="text-sm font-medium text-gray-100">{ fmt.Sprintf("%d", stats.OrdersByStatus.InProductionOrders) }</span>
							</div>
							<div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
								<div class="flex items-center gap-3">
									<div class="w-2 h-2 bg-orange-400 rounded-full"></div>
									<span class="text-sm text-gray-300">Ready to Ship</span>
								</div>
								<span class="text-sm font-medium text-gray-100">{ fmt.Sprintf("%d", stats.OrdersByStatus.ReadyToShipOrders) }</span>
							</div>
							<div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
								<div class="flex items-center gap-3">
									<div class="w-2 h-2 bg-cyan-400 rounded-full"></div>
									<span class="text-sm text-gray-300">Shipped</span>
								</div>
								<span class="text-sm font-medium text-gray-100">{ fmt.Sprintf("%d", stats.OrdersByStatus.ShippedOrders) }</span>
							</div>
							<div class="flex items-center justify-between p-3 bg-gray-800 rounded-lg">
								<div class="flex items-center gap-3">
									<div class="w-2 h-2 bg-green-400 rounded-full"></div>
									<span class="text-sm text-gray-300">Delivered</span>
								</div>
								<span class="text-sm font-medium text-gray-100">{ fmt.Sprintf("%d", stats.OrdersByStatus.DeliveredOrders) }</span>
							</div>
						</div>
					}
					@card.Footer(card.FooterProps{Class: "flex justify-end"}) {
						<a href="/admin/orders">
							@button.Button(button.Props{
								Variant: button.VariantSecondary,
								Size: button.SizeSm,
							}) {
								View All Orders →
							}
						</a>
					}
				}

				<!-- Inventory Alerts -->
				@card.Card() {
					@card.Header() {
						@card.Title() {
							Inventory Alerts
						}
					}
					@card.Content() {
						<div class="space-y-4">
							<!-- Stock Summary -->
							<div class="grid grid-cols-3 gap-4">
								<div class="text-center p-4 bg-gray-800 rounded-lg">
									<p class="text-2xl font-bold text-gray-100">{ fmt.Sprintf("%d", stats.TotalProducts) }</p>
									<p class="text-xs text-gray-400 mt-1">Total Products</p>
								</div>
								<div class="text-center p-4 bg-yellow-900/30 rounded-lg border border-yellow-600/30">
									<p class="text-2xl font-bold text-yellow-400">{ fmt.Sprintf("%d", stats.LowStockCount) }</p>
									<p class="text-xs text-yellow-400 mt-1">Low Stock</p>
								</div>
								<div class="text-center p-4 bg-red-900/30 rounded-lg border border-red-600/30">
									<p class="text-2xl font-bold text-red-400">{ fmt.Sprintf("%d", stats.OutOfStockCount) }</p>
									<p class="text-xs text-red-400 mt-1">Out of Stock</p>
								</div>
							</div>

							<!-- Low Stock Products -->
							if len(stats.LowStockProducts) > 0 {
								<div class="mt-4">
									<p class="text-sm font-medium text-gray-300 mb-3">Products Needing Attention:</p>
									<div class="space-y-2">
										for _, product := range stats.LowStockProducts {
											<div class="flex items-center justify-between p-2 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors">
												<div class="flex-1 min-w-0">
													<p class="text-sm text-gray-200 truncate">{ product.Name }</p>
													if product.Sku.Valid {
														<p class="text-xs text-gray-500">SKU: { product.Sku.String }</p>
													}
												</div>
												<div class="flex items-center gap-3">
													<span class="text-sm font-medium text-yellow-400">
														{ fmt.Sprintf("%d left", product.StockQuantity.Int64) }
													</span>
													<a href={ templ.SafeURL(fmt.Sprintf("/admin/product/edit?id=%s", product.ID)) } class="text-blue-400 hover:text-blue-300">
														<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
															<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
														</svg>
													</a>
												</div>
											</div>
										}
									</div>
								</div>
							}
						</div>
					}
					@card.Footer(card.FooterProps{Class: "flex justify-end"}) {
						<a href="/admin/products">
							@button.Button(button.Props{
								Variant: button.VariantSecondary,
								Size: button.SizeSm,
							}) {
								Manage Products →
							}
						</a>
					}
				}
			</div>

			<!-- Carts & Customers Section -->
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
				<!-- Active Carts -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Active Carts</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ fmt.Sprintf("%d", stats.ActiveCartsCount) }
								</h3>
								<a href="/admin/carts" class="text-xs text-blue-400 hover:text-blue-300 mt-1 inline-block">
									View all carts →
								</a>
							</div>
							<div class="p-3 bg-blue-900/30 rounded-lg">
								<svg class="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Abandoned Carts -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Abandoned (7d)</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ fmt.Sprintf("%d", stats.AbandonedCarts7d) }
								</h3>
								<a href="/admin/abandoned-carts" class="text-xs text-orange-400 hover:text-orange-300 mt-1 inline-block">
									Recovery dashboard →
								</a>
							</div>
							<div class="p-3 bg-orange-900/30 rounded-lg">
								<svg class="w-8 h-8 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- New Customers -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">New Customers</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ fmt.Sprintf("%d", stats.NewCustomersWeek) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">This week</p>
							</div>
							<div class="p-3 bg-green-900/30 rounded-lg">
								<svg class="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Pending Quotes -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Pending Quotes</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ fmt.Sprintf("%d", stats.PendingQuotes) }
								</h3>
								<a href="/admin/quotes" class="text-xs text-purple-400 hover:text-purple-300 mt-1 inline-block">
									View quotes →
								</a>
							</div>
							<div class="p-3 bg-purple-900/30 rounded-lg">
								<svg class="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
								</svg>
							</div>
						</div>
					}
				}
			</div>

			<!-- Recent Orders -->
			@card.Card() {
				@card.Header() {
					@card.Title() {
						Recent Orders
					}
				}
				@card.Content(card.ContentProps{Class: "p-0"}) {
					<div class="overflow-x-auto">
						@table.Table() {
							@table.Header() {
								@table.Row() {
									@table.Head() { Order ID }
									@table.Head() { Customer }
									@table.Head() { Items }
									@table.Head() { Total }
									@table.Head() { Status }
									@table.Head() { Date }
								}
							}
							@table.Body() {
								for _, order := range stats.RecentOrders {
									@table.Row() {
										@table.Cell() {
											<a href={ templ.SafeURL(fmt.Sprintf("/admin/orders/%s", order.ID)) } class="text-blue-400 hover:text-blue-300 font-mono text-sm">
												{ order.ID[:8] }...
											</a>
										}
										@table.Cell() {
											<div class="min-w-0">
												<p class="text-sm text-gray-200 truncate">{ order.CustomerName }</p>
												<p class="text-xs text-gray-500 truncate">{ order.CustomerEmail }</p>
											</div>
										}
										@table.Cell() {
											<span class="text-sm text-gray-300">
												{ fmt.Sprintf("%d", order.ItemCount) }
											</span>
										}
										@table.Cell() {
											<span class="text-sm font-medium text-gray-100">
												${ fmt.Sprintf("%.2f", float64(order.TotalCents)/100) }
											</span>
										}
										@table.Cell() {
											<span class={ fmt.Sprintf("px-2 py-1 text-xs font-medium rounded-full %s", getDashboardOrderStatusClass(order.Status.String)) }>
												if order.Status.Valid {
													{ order.Status.String }
												}
											</span>
										}
										@table.Cell() {
											<span class="text-sm text-gray-400">
												if order.CreatedAt.Valid {
													{ order.CreatedAt.Time.Format("Jan 2, 3:04 PM") }
												}
											</span>
										}
									}
								}
							}
						}
					</div>
				}
				@card.Footer(card.FooterProps{Class: "flex justify-end"}) {
					<a href="/admin/orders">
						@button.Button(button.Props{
							Variant: button.VariantSecondary,
							Size: button.SizeSm,
						}) {
							View All Orders →
						}
					</a>
				}
			}
		}
	}
}

func getDashboardOrderStatusClass(status string) string {
	switch status {
	case "pending":
		return "bg-yellow-900/30 text-yellow-400 border border-yellow-600/30"
	case "received":
		return "bg-blue-900/30 text-blue-400 border border-blue-600/30"
	case "in_production":
		return "bg-purple-900/30 text-purple-400 border border-purple-600/30"
	case "ready_to_ship":
		return "bg-orange-900/30 text-orange-400 border border-orange-600/30"
	case "shipped":
		return "bg-cyan-900/30 text-cyan-400 border border-cyan-600/30"
	case "delivered":
		return "bg-green-900/30 text-green-400 border border-green-600/30"
	case "cancelled":
		return "bg-red-900/30 text-red-400 border border-red-600/30"
	default:
		return "bg-gray-800 text-gray-400"
	}
}
