package admin

import (
	"fmt"
	"github.com/labstack/echo/v4"
	"github.com/loganlanou/logans3d-v4/internal/types"
	"github.com/loganlanou/logans3d-v4/views/layout"
)

templ DevMemory(c echo.Context, memStats types.MemoryStats) {
	@layout.AdminBase(c, "Memory Management") {
		@layout.AdminContainer() {
			<!-- Header -->
			<div class="flex justify-between items-center mb-8">
				<h1 class="admin-text-primary admin-text-2xl admin-font-bold">Memory Management</h1>
				<div class="flex space-x-3">
					<button onclick="updateMemoryStats()" class="admin-btn admin-btn-secondary">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
						</svg>
						Update Stats
					</button>
					<button onclick="triggerGC()" class="admin-btn admin-btn-primary">
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
						</svg>
						Force GC
					</button>
				</div>
			</div>

			<!-- Memory Stats Cards -->
			<div class="admin-stats-grid mb-8">
				<div class="admin-stat-card">
					<div class="admin-stat-number">{ fmt.Sprintf("%.2f", memStats.AllocMB) }</div>
					<div class="admin-stat-label">Allocated Memory (MB)</div>
				</div>
				<div class="admin-stat-card">
					<div class="admin-stat-number">{ fmt.Sprintf("%.2f", memStats.SysMB) }</div>
					<div class="admin-stat-label">System Memory (MB)</div>
				</div>
				<div class="admin-stat-card">
					<div class="admin-stat-number">{ fmt.Sprintf("%d", memStats.Goroutines) }</div>
					<div class="admin-stat-label">Active Goroutines</div>
				</div>
				<div class="admin-stat-card">
					<div class="admin-stat-number">{ fmt.Sprintf("%d", memStats.NumGC) }</div>
					<div class="admin-stat-label">GC Cycles</div>
				</div>
			</div>

			<!-- Detailed Memory Statistics Card -->
			<div class="admin-card" id="memory-stats">
				<div class="admin-card-header">
					<h2 class="admin-card-title flex items-center">
						<span class="text-2xl mr-3">ðŸ“ˆ</span>
						Detailed Memory Statistics
					</h2>
				</div>
				<div class="overflow-x-auto">
					<table class="admin-table">
						<tbody>
							<tr>
								<td class="admin-font-semibold">Allocated Memory</td>
								<td>{ fmt.Sprintf("%.2f MB", memStats.AllocMB) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">System Memory</td>
								<td>{ fmt.Sprintf("%.2f MB", memStats.SysMB) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">Total Allocations</td>
								<td>{ fmt.Sprintf("%d bytes", memStats.TotalAlloc) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">Heap Allocated</td>
								<td>{ fmt.Sprintf("%d bytes", memStats.HeapAlloc) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">Heap System</td>
								<td>{ fmt.Sprintf("%d bytes", memStats.HeapSys) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">Heap Idle</td>
								<td>{ fmt.Sprintf("%d bytes", memStats.HeapIdle) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">Heap In Use</td>
								<td>{ fmt.Sprintf("%d bytes", memStats.HeapInuse) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">Heap Released</td>
								<td>{ fmt.Sprintf("%d bytes", memStats.HeapReleased) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">GC Cycles</td>
								<td>{ fmt.Sprintf("%d", memStats.NumGC) }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">Last GC Time</td>
								<td>{ memStats.LastGC }</td>
							</tr>
							<tr>
								<td class="admin-font-semibold">Active Goroutines</td>
								<td>{ fmt.Sprintf("%d", memStats.Goroutines) }</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		}

		<!-- JavaScript for Memory Management -->
		<script>
			async function updateMemoryStats() {
				try {
					const response = await fetch('/dev/memory');
					const data = await response.json();

					if (data.memory) {
						// Just reload the page to get fresh data
						window.location.reload();
					}
				} catch (error) {
					console.error('Error updating memory stats:', error);
					alert('Error updating memory statistics');
				}
			}

			async function triggerGC() {
				try {
					const response = await fetch('/dev/gc', { method: 'POST' });
					const result = await response.json();
					alert('Garbage collection completed. Memory stats will update shortly.');
					setTimeout(() => window.location.reload(), 500);
				} catch (error) {
					console.error('Error triggering GC:', error);
					alert('Error triggering garbage collection');
				}
			}

			// Auto-refresh memory stats every 30 seconds
			setInterval(updateMemoryStats, 30000);
		</script>
	}
}
