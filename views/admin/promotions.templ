package admin

import (
	"database/sql"
	"github.com/labstack/echo/v4"
	"github.com/loganlanou/logans3d-v4/views/layout"
	"github.com/loganlanou/logans3d-v4/views/helpers"
	"github.com/loganlanou/logans3d-v4/storage/db"
	"github.com/loganlanou/logans3d-v4/components/card"
	"github.com/loganlanou/logans3d-v4/components/table"
	"github.com/loganlanou/logans3d-v4/components/badge"
	"fmt"
)

// CombinedPromotionStats combines all promotion analytics stats for a single campaign
type CombinedPromotionStats struct {
	// Basic stats from GetPromotionCodeStats
	TotalCodes   int64
	UsedCodes    sql.NullFloat64
	TotalUses    sql.NullFloat64

	// New analytics stats
	EmailsToNonUsers         int64
	ActiveCodesIssued        int64
	ActiveCodesRedeemed      sql.NullFloat64
	RedemptionRatePercent    float64
}

// CompositePromotionStats holds aggregate stats across all active campaigns
type CompositePromotionStats struct {
	TotalCodesIssued        int64
	TotalCodesRedeemed      sql.NullFloat64
	OverallRedemptionRate   float64
	TotalEmailsToNonUsers   int64
	TotalActiveCodes        int64
}

templ Promotions(c echo.Context, campaigns []db.PromotionCampaign, page int, compositeStats CompositePromotionStats) {
	@layout.AdminBase(c, "Promotion Campaigns") {
		@layout.AdminContainer() {
			<!-- Header -->
			<div class="flex justify-between items-center mb-6">
				<div>
					<h1 class="text-2xl font-bold text-gray-100">Promotion Campaigns</h1>
					<p class="text-gray-400 mt-1">Manage discount campaigns and promotion codes</p>
				</div>
			</div>

			<!-- Composite Analytics Stats (System-Wide - Active Campaigns Only) -->
			<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
				<!-- Overall Redemption Rate -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Overall Redemption Rate</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ helpers.FormatFloat(compositeStats.OverallRedemptionRate, 1) }%
								</h3>
								<p class="text-xs text-gray-500 mt-1">Across active campaigns</p>
							</div>
							<div class="p-3 bg-green-900/30 rounded-lg">
								<svg class="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Total Emails to Non-Users -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Total Emails to Non-Users</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ helpers.FormatInt(compositeStats.TotalEmailsToNonUsers) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">Potential conversions</p>
							</div>
							<div class="p-3 bg-orange-900/30 rounded-lg">
								<svg class="w-8 h-8 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Total Active Codes -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Total Active Codes</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ helpers.FormatInt(compositeStats.TotalActiveCodes) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">Non-expired codes</p>
							</div>
							<div class="p-3 bg-purple-900/30 rounded-lg">
								<svg class="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Total Codes Issued vs Redeemed -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Codes Issued</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ helpers.FormatNullFloat64AsInt(compositeStats.TotalCodesRedeemed, "0") } / { helpers.FormatInt(compositeStats.TotalCodesIssued) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">Redeemed / Total</p>
							</div>
							<div class="p-3 bg-blue-900/30 rounded-lg">
								<svg class="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
								</svg>
							</div>
						</div>
					}
				}
			</div>

			<!-- Campaigns List -->
			@card.Card() {
				@card.Header() {
					@card.Title() {
						All Campaigns ({ fmt.Sprintf("%d", len(campaigns)) })
					}
				}
				@card.Content() {
					if len(campaigns) == 0 {
						<div class="text-center py-12 text-gray-500">
							<p>No campaigns created yet</p>
						</div>
					} else {
						@table.Table() {
							@table.Header() {
								@table.Row() {
									@table.Head() { Campaign Name }
									@table.Head() { Type }
									@table.Head() { Discount }
									@table.Head() { Codes Issued }
									@table.Head() { Status }
									@table.Head() { Created }
								}
							}
							@table.Body() {
								for _, campaign := range campaigns {
									@table.Row() {
										@table.Cell() {
											<a href={ templ.SafeURL(fmt.Sprintf("/admin/promotions/%s", campaign.ID)) } class="text-blue-400 hover:text-blue-300 font-medium">
												{ campaign.Name }
											</a>
											if campaign.Description.Valid {
												<p class="text-sm text-gray-400 mt-1">{ campaign.Description.String }</p>
											}
										}
										@table.Cell() {
											<span class="capitalize">{ campaign.DiscountType }</span>
										}
										@table.Cell() {
											if campaign.DiscountType == "percentage" {
												<span class="font-semibold">{ helpers.FormatPercentage(campaign.DiscountValue) }</span>
											} else {
												<span class="font-semibold">{ helpers.FormatPrice(campaign.DiscountValue) }</span>
											}
										}
										@table.Cell() {
											<span class="text-gray-200">{ helpers.FormatNullInt64(campaign.CurrentUses, "0") }</span>
											if campaign.MaxUses.Valid {
												<span class="text-gray-400"> / { helpers.FormatInt(campaign.MaxUses.Int64) }</span>
											}
										}
										@table.Cell() {
											if campaign.Active.Valid && campaign.Active.Int64 == 1 {
												@badge.Badge(badge.Props{Variant: badge.VariantDefault}) {
													Active
												}
											} else {
												@badge.Badge(badge.Props{Variant: badge.VariantSecondary}) {
													Inactive
												}
											}
										}
										@table.Cell() {
											<span class="text-sm text-gray-300">
												{ helpers.FormatNullTime(campaign.CreatedAt, "Jan 2, 2006", "-") }
											</span>
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

templ PromotionDetail(c echo.Context, campaign db.PromotionCampaign, codes []db.PromotionCode, stats CombinedPromotionStats) {
	@layout.AdminBase(c, "Campaign Details") {
		@layout.AdminContainer() {
			<!-- Back Button -->
			<div class="mb-6">
				<a href="/admin/promotions" class="text-blue-600 hover:text-blue-800">
					‚Üê Back to Campaigns
				</a>
			</div>

			<!-- Header -->
			<div class="flex justify-between items-start mb-6">
				<div>
					<h1 class="text-2xl font-bold text-gray-100">{ campaign.Name }</h1>
					if campaign.Description.Valid {
						<p class="text-gray-400 mt-1">{ campaign.Description.String }</p>
					}
				</div>
				<div>
					if campaign.Active.Valid && campaign.Active.Int64 == 1 {
						@badge.Badge(badge.Props{Variant: badge.VariantDefault}) {
							Active
						}
					} else {
						@badge.Badge(badge.Props{Variant: badge.VariantSecondary}) {
							Inactive
						}
					}
				</div>
			</div>

			<!-- Analytics Stats (Priority Metrics) -->
			<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
				<!-- Redemption Rate -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Redemption Rate</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ helpers.FormatFloat(stats.RedemptionRatePercent, 1) }%
								</h3>
								<p class="text-xs text-gray-500 mt-1">Active codes used</p>
							</div>
							<div class="p-3 bg-green-900/30 rounded-lg">
								<svg class="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Emails to Non-Users -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Emails to Non-Users</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ helpers.FormatInt(stats.EmailsToNonUsers) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">Potential conversions</p>
							</div>
							<div class="p-3 bg-orange-900/30 rounded-lg">
								<svg class="w-8 h-8 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
								</svg>
							</div>
						</div>
					}
				}

				<!-- Active Codes Status -->
				@card.Card() {
					@card.Content(card.ContentProps{Class: "p-6"}) {
						<div class="flex items-center justify-between">
							<div>
								<p class="text-sm font-medium text-gray-400">Active Codes</p>
								<h3 class="text-2xl font-bold text-gray-100 mt-2">
									{ helpers.FormatNullFloat64AsInt(stats.ActiveCodesRedeemed, "0") } / { helpers.FormatInt(stats.ActiveCodesIssued) }
								</h3>
								<p class="text-xs text-gray-500 mt-1">Redeemed / Issued</p>
							</div>
							<div class="p-3 bg-purple-900/30 rounded-lg">
								<svg class="w-8 h-8 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"></path>
								</svg>
							</div>
						</div>
					}
				}
			</div>

			<!-- Campaign Stats -->
			<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
				@card.Card() {
					@card.Content() {
						<div class="text-center">
							<p class="text-3xl font-bold text-gray-100">{ helpers.FormatInt(stats.TotalCodes) }</p>
							<p class="text-sm text-gray-400 mt-1">Total Codes</p>
						</div>
					}
				}

				@card.Card() {
					@card.Content() {
						<div class="text-center">
							<p class="text-3xl font-bold text-green-400">{ helpers.FormatNullFloat64AsInt(stats.UsedCodes, "0") }</p>
							<p class="text-sm text-gray-400 mt-1">Codes Used</p>
						</div>
					}
				}

				@card.Card() {
					@card.Content() {
						<div class="text-center">
							<p class="text-3xl font-bold text-blue-400">{ helpers.FormatNullFloat64AsInt(stats.TotalUses, "0") }</p>
							<p class="text-sm text-gray-400 mt-1">Total Redemptions</p>
						</div>
					}
				}

				@card.Card() {
					@card.Content() {
						<div class="text-center">
							if campaign.DiscountType == "percentage" {
								<p class="text-3xl font-bold text-blue-400">{ helpers.FormatPercentage(campaign.DiscountValue) }</p>
							} else {
								<p class="text-3xl font-bold text-blue-400">{ helpers.FormatPrice(campaign.DiscountValue) }</p>
							}
							<p class="text-sm text-gray-400 mt-1">Discount Value</p>
						</div>
					}
				}
			</div>

			<!-- Codes List -->
			@card.Card() {
				@card.Header() {
					@card.Title() {
						Promotion Codes ({ fmt.Sprintf("%d", len(codes)) })
					}
				}
				@card.Content() {
					if len(codes) == 0 {
						<div class="text-center py-12 text-gray-500">
							<p>No codes issued yet</p>
						</div>
					} else {
						@table.Table() {
							@table.Header() {
								@table.Row() {
									@table.Head() { Code }
									@table.Head() { Email }
									@table.Head() { Uses }
									@table.Head() { Expires }
									@table.Head() { Created }
								}
							}
							@table.Body() {
								for _, code := range codes {
									@table.Row() {
										@table.Cell() {
											<span class="font-mono font-semibold text-blue-400">{ code.Code }</span>
										}
										@table.Cell() {
											if code.Email.Valid {
												<span class="text-gray-300">{ code.Email.String }</span>
											} else {
												<span class="text-gray-400">-</span>
											}
										}
										@table.Cell() {
											<span class="text-gray-200">{ helpers.FormatNullInt64(code.CurrentUses, "0") }</span>
											if code.MaxUses.Valid {
												<span class="text-gray-400"> / { helpers.FormatInt(code.MaxUses.Int64) }</span>
											}
										}
										@table.Cell() {
											<span class="text-sm text-gray-300">{ helpers.FormatNullTime(code.ExpiresAt, "Jan 2, 2006", "Never") }</span>
										}
										@table.Cell() {
											<span class="text-sm text-gray-300">{ helpers.FormatNullTime(code.CreatedAt, "Jan 2, 2006", "-") }</span>
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
