package admin

import (
	"fmt"
	"time"
	"github.com/labstack/echo/v4"
	"github.com/loganlanou/logans3d-v4/views/layout"
	"github.com/loganlanou/logans3d-v4/components/card"
	"github.com/loganlanou/logans3d-v4/components/table"
	"github.com/loganlanou/logans3d-v4/components/badge"
)

type UserListItem struct {
	ID                 string
	Email              string
	FullName           string
	FirstName          string
	LastName           string
	Username           string
	ProfileImageUrl    string
	IsAdmin            bool
	CreatedAt          time.Time
	LastActivity       time.Time
	OrderCount         int64
	LifetimeSpendCents int64
}

templ Users(
	c echo.Context,
	users []UserListItem,
	searchQuery string,
	dateFrom string,
	dateTo string,
	sortBy string,
) {
	@layout.AdminBase(c, "Registered Users") {
		@layout.AdminContainer() {
			<!-- Header -->
			<div class="flex justify-between items-center mb-6">
				<div>
					<h1 class="text-2xl font-bold text-white">Registered Users</h1>
					<p class="text-sm text-gray-400 mt-1">Manage customer accounts and view statistics</p>
				</div>
			</div>

			<!-- Summary Stats -->
			<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
				<!-- Total Users -->
				@card.Card() {
					@card.Content() {
						<div class="space-y-2">
							<div class="flex items-center justify-between">
								<p class="text-sm font-medium text-gray-400">Total Users</p>
								<span class="text-2xl">ðŸ‘¥</span>
							</div>
							<p class="text-3xl font-bold text-white">
								{ fmt.Sprintf("%d", len(users)) }
							</p>
							<p class="text-sm text-gray-400">Registered accounts</p>
						</div>
					}
				}

				<!-- Total Lifetime Value -->
				@card.Card() {
					@card.Content() {
						<div class="space-y-2">
							<div class="flex items-center justify-between">
								<p class="text-sm font-medium text-gray-400">Total Lifetime Value</p>
								<span class="text-2xl">ðŸ’°</span>
							</div>
							<p class="text-3xl font-bold text-white">
								{ formatUserLifetimeValue(users) }
							</p>
							<p class="text-sm text-gray-400">Across all users</p>
						</div>
					}
				}

				<!-- Average Order Value -->
				@card.Card() {
					@card.Content() {
						<div class="space-y-2">
							<div class="flex items-center justify-between">
								<p class="text-sm font-medium text-gray-400">Avg Lifetime Value</p>
								<span class="text-2xl">ðŸ“Š</span>
							</div>
							<p class="text-3xl font-bold text-white">
								{ formatUserAvgLifetimeValue(users) }
							</p>
							<p class="text-sm text-gray-400">Per user</p>
						</div>
					}
				}
			</div>

			<!-- Search and Filters -->
			<div class="mb-6 space-y-4">
				<!-- Search Bar -->
				<div class="relative">
					<input
						type="text"
						placeholder="Search by name, email, or username..."
						value={ searchQuery }
						class="w-full px-4 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						onkeyup="debounceSearch(this.value)"
					/>
				</div>

				<!-- Date Range and Sort -->
				<div class="flex gap-4 flex-wrap items-center">
					<!-- Date From -->
					<input
						type="date"
						name="date_from"
						value={ dateFrom }
						class="px-4 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						onchange="window.location.href = updateQueryParam('date_from', this.value)"
					/>
					<!-- Date To -->
					<input
						type="date"
						name="date_to"
						value={ dateTo }
						class="px-4 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						onchange="window.location.href = updateQueryParam('date_to', this.value)"
					/>
					<span class="text-gray-300">|</span>
					<!-- Sort Options -->
					<select
						class="px-4 py-2 bg-gray-800 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
						onchange="window.location.href = updateQueryParam('sort', this.value)"
					>
						<option value="created_at" selected?={ sortBy == "" || sortBy == "created_at" }>Sort by Registration Date</option>
						<option value="lifetime_spend" selected?={ sortBy == "lifetime_spend" }>Sort by Lifetime Spend</option>
					</select>
					if dateFrom != "" || dateTo != "" || searchQuery != "" {
						<a href="/admin/users" class="px-4 py-2 text-sm text-gray-300 font-medium border border-gray-600 rounded-lg hover:bg-gray-700 hover:text-white transition-colors">
							Clear Filters
						</a>
					}
				</div>
			</div>

			<script>
				function updateQueryParam(key, value) {
					const url = new URL(window.location);
					if (value) {
						url.searchParams.set(key, value);
					} else {
						url.searchParams.delete(key);
					}
					return url.toString();
				}

				let searchTimeout;
				function debounceSearch(value) {
					clearTimeout(searchTimeout);
					searchTimeout = setTimeout(() => {
						window.location.href = updateQueryParam('search', value);
					}, 500);
				}
			</script>

			<!-- Users Table -->
			@card.Card() {
				@card.Header() {
					@card.Title() {
						Users ({ fmt.Sprintf("%d", len(users)) })
					}
					@card.Description() {
						Click on any user to view their profile and activity
					}
				}
				@card.Content() {
					if len(users) == 0 {
						<div class="text-center py-12">
							<p class="text-gray-400">No users found</p>
						</div>
					} else {
						@table.Table() {
							@table.Header() {
								@table.Row() {
									@table.Head() { User }
									@table.Head() { Email }
									@table.Head() { Orders }
									@table.Head() { Lifetime Spend }
									@table.Head() { Registered }
									@table.Head() { Last Activity }
								}
							}
							@table.Body() {
								for _, user := range users {
									@table.Row(table.RowProps{
										Class:   "cursor-pointer hover:bg-gray-750",
										Attributes: templ.Attributes{
											"data-user-id": user.ID,
										},									}) {
										@table.Cell() {
											<div class="flex items-center gap-3">
												if user.ProfileImageUrl != "" {
													<img
														src={ user.ProfileImageUrl }
														alt={ user.FullName }
														class="w-10 h-10 rounded-full"
													/>
												} else {
													<div class="w-10 h-10 rounded-full bg-blue-600 flex items-center justify-center text-white font-semibold">
														{ getUserInitials(user) }
													</div>
												}
												<div>
													<div class="flex items-center gap-2">
														<span class="font-medium text-white">{ user.FullName }</span>
														if user.IsAdmin {
															@badge.Badge(badge.Props{
																Variant: badge.VariantSecondary,
															}) {
																Admin
															}
														}
													</div>
													if user.Username != "" {
														<p class="text-sm text-gray-400">{ "@" + user.Username }</p>
													}
												</div>
											</div>
										}
										@table.Cell() {
											<a
												href={ templ.URL("mailto:" + user.Email) }
												class="text-blue-400 hover:text-blue-300"
												onclick="event.stopPropagation()"
											>
												{ user.Email }
											</a>
										}
										@table.Cell() {
											<span class="text-white">{ fmt.Sprintf("%d", user.OrderCount) }</span>
										}
										@table.Cell() {
											<span class="text-white font-medium">{ formatUsersCents(user.LifetimeSpendCents) }</span>
										}
										@table.Cell() {
											<span class="text-gray-400">{ formatDate(user.CreatedAt) }</span>
										}
										@table.Cell() {
											if !user.LastActivity.IsZero() {
												<span class="text-gray-400">{ formatDate(user.LastActivity) }</span>
											} else {
												<span class="text-gray-500">Never</span>
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		<!-- Script to make table rows clickable -->
		<script>
			(function() {
				// Add click handlers to user table rows
				document.querySelectorAll('.cursor-pointer[data-user-id]').forEach(function(row) {
					row.addEventListener('click', function(e) {
						// Don't navigate if clicking on a link
						if (e.target.tagName === 'A' || e.target.closest('a')) {
							return;
						}

						// Navigate to user detail page
						var userId = row.getAttribute('data-user-id');
						if (userId) {
							window.location.href = '/admin/users/' + userId;
						}
					});
				});
			})();
		</script>
	}
}

func getUserInitials(user UserListItem) string {
	if user.FirstName != "" && user.LastName != "" {
		return string(user.FirstName[0]) + string(user.LastName[0])
	}
	if user.FullName != "" && len(user.FullName) >= 2 {
		return string(user.FullName[0]) + string(user.FullName[1])
	}
	if user.Email != "" {
		return string(user.Email[0])
	}
	return "U"
}

func formatDate(t time.Time) string {
	if t.IsZero() {
		return ""
	}
	return t.Format("Jan 2, 2006")
}

func formatUsersCents(cents int64) string {
	return fmt.Sprintf("$%.2f", float64(cents)/100)
}

func formatUserLifetimeValue(users []UserListItem) string {
	var total int64
	for _, u := range users {
		total += u.LifetimeSpendCents
	}
	return formatUsersCents(total)
}

func formatUserAvgLifetimeValue(users []UserListItem) string {
	if len(users) == 0 {
		return "$0.00"
	}
	var total int64
	for _, u := range users {
		total += u.LifetimeSpendCents
	}
	avg := total / int64(len(users))
	return formatUsersCents(avg)
}
