package shop

import (
	"fmt"
	"github.com/loganlanou/logans3d-v4/storage/db"
	"github.com/loganlanou/logans3d-v4/views/layout"
)

templ ProductDetail(product db.Product, images []db.ProductImage, category db.Category) {
	@layout.Base(layout.Meta{
		Title: fmt.Sprintf("%s - Logan's 3D Creations", product.Name),
		Description: product.Description.String,
		Keywords: fmt.Sprintf("3D printed, %s, collectible, custom printing", product.Name),
	}) {
		<div class="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 py-8">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Breadcrumb -->
				<nav class="flex mb-8 text-sm" aria-label="Breadcrumb">
					<ol class="inline-flex items-center space-x-1 md:space-x-3">
						<li class="inline-flex items-center">
							<a href="/" class="text-slate-700 hover:text-blue-600">Home</a>
						</li>
						<li>
							<div class="flex items-center">
								<svg class="w-4 h-4 mx-1 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
								</svg>
								<a href="/shop" class="text-slate-700 hover:text-blue-600">Shop</a>
							</div>
						</li>
						<li>
							<div class="flex items-center">
								<svg class="w-4 h-4 mx-1 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
								</svg>
								<a href={ templ.URL(fmt.Sprintf("/shop/category/%s", category.Slug)) } class="text-slate-700 hover:text-blue-600">{ category.Name }</a>
							</div>
						</li>
						<li>
							<div class="flex items-center">
								<svg class="w-4 h-4 mx-1 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 111.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
								</svg>
								<span class="text-slate-500">{ product.Name }</span>
							</div>
						</li>
					</ol>
				</nav>

				<div class="grid md:grid-cols-2 gap-12">
					<!-- Product Images -->
					<div class="space-y-4">
						if len(images) > 0 {
							<div class="aspect-square bg-white rounded-2xl shadow-lg overflow-hidden">
								<img src={ fmt.Sprintf("/public/images/products/%s", images[0].ImageUrl) } alt={ product.Name } class="w-full h-full object-cover" />
							</div>
							if len(images) > 1 {
								<div class="grid grid-cols-4 gap-2">
									for _, image := range images[1:] {
										<div class="aspect-square bg-white rounded-lg shadow overflow-hidden cursor-pointer hover:shadow-lg transition duration-200">
											<img src={ fmt.Sprintf("/public/images/products/%s", image.ImageUrl) } alt={ product.Name } class="w-full h-full object-cover" />
										</div>
									}
								</div>
							}
						} else {
							<div class="aspect-square bg-slate-100 rounded-2xl shadow-lg flex items-center justify-center">
								<svg class="w-24 h-24 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
								</svg>
							</div>
						}
					</div>

					<!-- Product Info -->
					<div class="bg-white rounded-2xl shadow-lg p-8">
						<h1 class="text-3xl font-bold text-slate-900 mb-4">{ product.Name }</h1>
						
						<!-- Price -->
						<div class="mb-6">
							<div class="text-4xl font-bold text-blue-600">
								${ fmt.Sprintf("%.2f", float64(product.PriceCents)/100) }
							</div>
						</div>

						<!-- Stock Status -->
						<div class="mb-6">
							if product.StockQuantity.Valid && product.StockQuantity.Int64 > 0 {
								<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
									<svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
									</svg>
									In Stock ({ fmt.Sprintf("%d", product.StockQuantity.Int64) } available)
								</span>
							} else {
								<span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
									<svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
									</svg>
									Out of Stock
								</span>
							}
						</div>

						<!-- Category -->
						<div class="mb-6">
							<span class="text-slate-600">Category: </span>
							<a href={ templ.URL(fmt.Sprintf("/shop/category/%s", category.Slug)) } 
							   class="text-blue-600 hover:text-blue-800 font-medium">
								{ category.Name }
							</a>
						</div>

						<!-- Description -->
						if product.Description.Valid {
							<div class="mb-8">
								<h3 class="text-lg font-semibold text-slate-900 mb-3">Description</h3>
								<p class="text-slate-600 leading-relaxed">{ product.Description.String }</p>
							</div>
						}

						<!-- Add to Cart -->
						<div class="space-y-4">
							if product.StockQuantity.Valid && product.StockQuantity.Int64 > 0 {
								<button class="w-full bg-blue-600 text-white py-4 px-6 rounded-lg font-bold text-lg hover:bg-blue-700 transition duration-200"
								        onclick="addToCart('{ product.ID }')">
									Add to Cart
								</button>
							} else {
								<button class="w-full bg-slate-300 text-slate-500 py-4 px-6 rounded-lg font-bold text-lg cursor-not-allowed" disabled>
									Out of Stock
								</button>
							}
							<a href="/custom" class="block w-full bg-slate-100 text-slate-700 py-3 px-6 rounded-lg font-semibold text-center hover:bg-slate-200 transition duration-200">
								Need a Custom Version?
							</a>
						</div>

						<!-- Product Details -->
						<div class="mt-8 border-t border-slate-200 pt-6">
							<h3 class="text-lg font-semibold text-slate-900 mb-4">Product Details</h3>
							<dl class="space-y-2">
								if product.LeadTimeDays.Valid {
									<div class="flex justify-between">
										<dt class="text-slate-600">Lead Time:</dt>
										<dd class="font-medium">{ fmt.Sprintf("%d days", product.LeadTimeDays.Int64) }</dd>
									</div>
								}
								if product.Sku.Valid {
									<div class="flex justify-between">
										<dt class="text-slate-600">SKU:</dt>
										<dd class="font-medium font-mono">{ product.Sku.String }</dd>
									</div>
								}
							</dl>
						</div>
					</div>
				</div>

				<!-- Back to Shop -->
				<div class="mt-12 text-center">
					<a href="/shop" class="inline-flex items-center text-blue-600 hover:text-blue-800 font-medium">
						<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
						</svg>
						Back to Shop
					</a>
				</div>
			</div>
		</div>

		<!-- Add to Cart JavaScript -->
		<script>
			function addToCart(productId) {
				// Simple add to cart functionality
				fetch('/cart/add', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						product_id: productId,
						quantity: 1
					})
				})
				.then(response => response.json())
				.then(data => {
					if (data.status === 'added') {
						// Show success message
						alert('Product added to cart!');
					}
				})
				.catch(error => {
					console.error('Error:', error);
					alert('Error adding product to cart');
				});
			}
		</script>
	}
}